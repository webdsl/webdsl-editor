module WebDSL-Completions

completions
                                                                                          
  // Syntactic content completion can be defined as follows:                              
  //                                                                                      
  //   completion keyword  : "keyword"                                                    
  //   completion template : "if " <e> " then\n\t" <s> "\nend"                            
  //                                                                                      
  // This defines keyword completion for "keyword" and                                    
  // a template completion for the "if" keyword (note the use of \n, \t, and spaces).     
  // In this template, the text selection expands to the "e" placeholder identifier       
  // enclosed in <> brackets.                                                             
  //                                                                                      
  // Use the (blank) annotation if you want a template completion only to                 
  // appear on blank lines:                                                               
  //                                                                                      
  //   completion template: "section" <title> "\n\t" (blank)                              
  //                                                                                      
  // Semantic content completion can be defined as follows:                               
  //                                                                                      
  //   completion proposer : completion-function-call                                     
  //   completion trigger  : "\."                                                         
  //                                                                                      
  // This sets completion-function-call as the completion strategy,                       
  // and declares that [A-Za-z0-9_]+ may be used as a lexical pattern                     
  // to parse identifiers (used to set the text selection with suggestions).              
  // The completion trigger uses a regular expression to specify that                     
  // completions should be proposed as the user types ".".                                
  //                                                                                      
  // Completions make use of the identifier lexical defined in YourLanguage-Syntax.esv    
  // to select identifiers in completion suggestions.                                     
  //                                                                                      
  // Semantic completion uses the semantic provider defined in YourLanguage-Builders.esv  
  // All semantic services may make use of the dynamic rules created by the observer.     

completions
                                      
  // Derived completions may follow   
  /*                                    
  completion keyword                : "(?P<"
  completion keyword                : "\\Q"
  completion keyword                : "\\E"
  completion keyword                : "\\x"
  completion keyword                : "\\u"
  completion keyword                : "\\t"
  completion keyword                : "\\n"
  completion keyword                : "\\r"
  completion keyword                : "\\f"
  completion keyword                : "\\a"
  completion keyword                : "\\e"
  completion keyword                : "\\w"
  completion keyword                : "\\W"
  completion keyword                : "\\s"
  completion keyword                : "\\S"
  completion keyword                : "\\d"
  completion keyword                : "\\D"
  completion keyword                : "\\c"
  completion keyword                : "\\b"
  completion keyword                : "\\B"
  completion keyword                : "\\A"
  completion keyword                : "\\G"
  completion keyword                : "\\Z"
  completion keyword                : "\\z"
  completion keyword                : "\\\t"
  completion keyword                : "\\\n"
  
   completion template:
     "section <name>" "\n\n\t"
 
   completion proposer: editor-complete
  */
  
  completion proposer : editor-complete
  identifier lexical  : [A-Za-z0-9_\$]+
  //completion trigger  : "\."  //a bit too slow to do automatically on each . typed, just press ctrl/cmd+space

completions
  
  completion template : Statement = "if" "(" <bool> ") {\n\t\n} else {\n\t\n}" (blank)
  completion template : Statement = "if" "(" <bool> ") {\n\t\n}" (blank)
  completion template : Statement = "for" "(" <name> " : " <Type> " in " <ListOrSetExp> ") {\n\t\n}" (blank)
  completion template : Statement = "for" "(" <name> " : " <Type> ") {\n\t\n}" (blank)
  completion template : Statement = "for" "(" <name> " : " <Type> " in " <ListOrSetExp> " where " <bool> " order by " <name.prop> ") {\n\t\n}" (blank)
  completion template : Statement = "for" "(" <name> " : Int from " <int> " to " <int> ") {\n\t\n}" (blank)
  completion template : Statement = "var " <name> " := " <exp> ";" (blank)
  completion template : Statement = "var " <name> " : " <Type> " := " <exp> ";" (blank)
  completion template : Statement = "return " <exp> ";" (blank)
  completion template : Statement = "validate ("<bool> ", " <string> ");" (blank)
  completion template : Statement = "case ("  <exp> "){\n\t" <exp> " { } \ndefault { }\n}" (blank)
  completion template : Statement = "return;" (blank)
  completion template : Statement = "while (" <exp> ") {\n\t\n}" (blank)

completions

  completion template : TemplateElement = "if" "(" <bool> ") {\n\t\n} else {\n\t\n}" (blank)
  completion template : TemplateElement = "if" "(" <bool> ") {\n\t\n}" (blank)
  completion template : TemplateElement = "for" "(" <name> " : " <Type> " in " <ListOrSetExp> ") {\n\t\n}" (blank)
  completion template : TemplateElement = "for" "(" <name> " : " <Type> ") {\n\t\n}" (blank)
  completion template : TemplateElement = "for" "(" <name> " : " <Type> " in " <ListOrSetExp> " where " <bool> " order by " <name.prop> ") {\n\t\n}" (blank)   
  completion template : TemplateElement = "submit action{" <> "} { \"save\" }" (blank) 
  completion template : TemplateElement = "submitlink action{" <> "} { \"save\" }" (blank)
  completion template : TemplateElement = "output(" <exp> ")" (blank)
  completion template : TemplateElement = "input(" <exp.prop> ")" (blank)
  completion template : TemplateElement = "form {\n\t" <> "\n}" (blank)
  completion template : TemplateElement = "navigate " <root()> " { \"link\" }" (blank)
  completion template : TemplateElement = "case ("  <exp> "){\n\t" <exp> " { } \ndefault { }\n}" (blank)
    
completions

  completion template : Definition = "entity " <Name> " : " <Super> " {\n\t\n}" (blank)
  completion template : Definition = "entity " <Name> " {\n\t\n}" (blank)
  completion template : Definition = "session " <name> " {\n\t\n}" (blank)
  completion template : Definition = "imports " <file> (blank)
  completion template : Definition = "invoke " <myfunc()> " every " <5 minutes> (blank) 
  completion template : Definition = "derive crud  " <Entity> (blank)
  completion template : Definition = "extend entity " <Entity> " {\n\t\n}" (blank) 
  completion template : Definition = "principal is " <Entity> " with credentials " <name, password> (blank)
  completion template : Definition = "function " <name> "(x : Type, y : Type) : ReturnType {\n\t\n}" (blank) 
  completion template : Definition = "function " <name> "() {\n\t\n}" (blank) 
  completion template : Definition = "predicate " <name> "(x : Type){\n\ttrue\n}" (blank) 
  completion template : Definition = "type " <primtype> " {\n\t\n}" (blank)
  completion template : Definition = "test "  <name> " " " {\n\t\n}" (blank)
  completion template : Definition = "service " <name> "(){\n\t\n}" (blank) 
  completion template : Definition = "var " <name> " : " <Type> " := " <exp> (blank)
  completion template : Definition = "var " <name> " := " <exp> (blank)
  completion template : Definition = "request var " <name> " : " <Type> (blank)
  completion template : Definition = "enum " <Name> " {\n\t\n}" (blank) 
  completion template : Definition = "analyzer " <Name> "{\n\t//charfilter = aCharFilter\n\ttokenizer = StandardTokenizer\n\t//tokenfilter = aTokenFilter\n}" (blank)

completions

  completion template: Section = "access control rules" "\n\n\t"
  completion template: Section = "section " <name> "\n\n\t"
  
completions

  completion template : EntityBodyDeclaration = <name> " :: " <PrimType>
  completion template : EntityBodyDeclaration = <name> " -> " <Entity>
  completion template : EntityBodyDeclaration = "function " <name> "(x : Type, y : Type) : ReturnType {\n\t\n}" (blank) 
  completion template : EntityBodyDeclaration = "function " <name> "() {\n\t\n}" (blank)
  
   