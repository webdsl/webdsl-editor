module util

imports
  libstratego-lib
  lib/editor-common.generated
  libwebdsl-generator
  libwebdsl-front
 
rules

  collect-markers(s) =
    collect-all(s,conc);
    try(flatten-list);
    map((id,try(concat-strings)))
      
  require(s)=not(s)
  constraint-warning=fail
  constraint-note=fail
  check=fail

signature constructors
  
  FromEntity : Term -> Term
  IsGeneratedAnno : Term

rules

  // Re-use compiler normalization
  desugar-def = normalize-declare; try(desugar-def)

  // Desugar, but remain compatible with compiler typechecker
  desugar-compat = try(preserve(simplify-application-constructor <+ simplify-module-constructor))

  // Documentation Presentation
  make-list = ?list; <flatten-list; concat-strings> ["<ul>",<map(make-item)> list,"</ul>"]
  make-item = ?str; <concat-strings> ["<li>",str,"</li>"]
  
rules   // AST mapping

  preserve(s) =
    if has-ast-mapping then
        origin-track-forced(s)
      ; ensure-ast(|"after preserve")
    else
        s
    end
  
  ensure-ast(|msg) = 
       is-list  // lists don't always have an ast association
    <+ where(not(has-ast-mapping); debug(<concat-strings> ["No AST mapping while ",msg,": "]); print-stacktrace)
    <+ id

  has-ast-mapping = where(origin-term)

rules   // Dummies
  
  strip-bodies = fail

rules   // Versioning
  
  editor-timestamp = import-term(include/editor.timestamp.aterm)
  
rules // file IO
	
  text-to-file(|filename): text -> text
    where(
      file := <fopen> (filename, "w")
      ; <fputs> (text, file)
      ; <fclose> file
    )
    
  write-ast-to-file(|filename) : ast -> ast
	with 	text := <pp-webdsl-string> ast //todo: changeback to pp from compiler  
	  		; <text-to-file(|filename)> text
  
  make-valid-page-from-defs(|moduleName): defs -> page
  	where 	<is-list> defs
  			; page := ModuleDefs(moduleName, defs, [])
  			  
  create-dir-in-workspace : dirname -> dirname
     with 	dirs := <string-tokenize(|['/'])> dirname
     		; base := <split-init-last; Fst; separate-by(|"/"); concat-strings> dirs
     		; if <?1><length>dirs then id else <create-dir-in-workspace> base end
     		; dir := $[[<project-path>]/[dirname]]
     		; if <file-exists> dir then id else <mkdir> dir end
     		; <refresh-workspace-file> base
     		  
rules // check for builtin-entities
  is-builtin-entity : entity -> entity
   	where	(? EntityNoSuper(name, _) 
     			<+ ?Entity(name, _, _))
     			<+ is-string; ?name
     		; builtin-entities := [
     		  	"dummy_webdsl_entity",
     		  	"Exception",
     		  	"QueuedEmail",
     		  	"RequestLogEntry",
     		  	"SecurityContext",
     		  	"SessionManager",
     		  	"SessionMessage",
     		  	"ValidationException",
     		  	"ValidationExceptionMultiple"
     		  ]
     		; <fetch(?name)> builtin-entities  
rules //helper 
	add-elem-to-list(|elem): list -> [elem | list]
		where <is-list> list
rules 
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected // we just return the input term
