module trans/webdsl_editor

imports
  libstratego-lib
  libwebdsl-generator
  libwebdsl-front
  libwrite-files
  
  typecheck/import		// for ExtraWarnings
  trans/-
  lib/-
  
signature constructors
  FILE : Term -> Term
  
strategies // editor service interface

  main-webdsl =
     fatal-err(|"Not designed to be invoked directly")
  
  editor-check(|fullpath): ast -> (ast-renamed, errors, warns, notes)
    with
        // Typecheck local
        {| DynamicRulesUsed, ExtraWarnings:
            enable-dr-usage-tracking
          ; {| Rename:
              dbg-time(rename-top => ast-renamed | "rename")
            |}
          ; not(find-extra-errors)       // collected in dr
          ; warn3 := <bagof-ExtraWarnings>
          ; (err1, warn1) := 
              <dbg-time(catch-errors-editor(constraint-error-all) | "typecheck")> ast-renamed
          ; disable-dr-usage-tracking
            
            // remove {DR_DUMMY()}
          ; all-keys-DynamicRulesUsed; remove-dr-dummies => drs
          ; rules(RulesUsedBy : fullpath -> drs)
        |}
        // Typecheck global
      ; dbg-time(
          (err2, warn2) := <catch-errors-editor(not(<constraint-error-global> ""))>
        | "constraint-global")
      ; if exclusivewarn := <ExclusiveWarning>
        then errors := []
           ; warns  := [exclusivewarn]
           ; notes  := []
        else errors := <concat> [err1,err2]
           ; warns  := <concat> [warn1,warn2,warn3]
           ; notes  := []
        end
  
  //show only this warning, remove all other errors and warnings
  add-exclusive-warning = ?x; rules( ExclusiveWarning := x )
  
  normalize-windows-path = string-replace(|"\\\\", "/"); string-replace(|"\\", "/")
  
  // Path is relative to project, without leading slash
  // Projectpath is an absolute path to the project root, without trailing slash
  webdsl-editor-init =
      ?(path, projectpath, ast)
    ; editor-init     // cleanup dynamic rules
    ; fullpath := <concat-strings; normalize-windows-path> [projectpath, "/", path]
    ; rules( FullPath := fullpath )
    ; <desugar-compat; try(get-main-file-name)> ast      // set ApplicationIniDir
  
  // Normal analysis entry point
  editor-analyze: input@(ast, path, projectpath) -> result
    with  disable-dr-usage-tracking     // avoid overhead
        ; <debug> ""
        ; !path; debug(!"Analyzing: ")
        ; <webdsl-editor-init> (path, projectpath, ast)
        ; if is-editor-updated then
            // prevents queueing analysis for all modules
            rules(PerformingUpdate := True())
          end
        ; <editor-analyze-work> ast => result
        ; if PerformingUpdate then
              // If editor is updated, we need to reparse and recheck all files to create a new dependency graph.
              // This might take a while; we'll schedule a background job for this.
              dependencies-file
            ; try(remove-file)         // marks all files as changed
            ; editor-analyze-multifile
            ; ?dependent-mods
              // with progress meter.
            ; <debug> "Editor updated; scheduling background update.\n"
            ; <queue-strategy(|"editor-update-modules", "Complete typecheck...")> dependent-mods
          end
        ; enable-dr-usage-tracking      // for dr -> module resolving
          
  editor-analyze-work:
    ast -> (ast-desugared, errors, warnings, notes)
    with
      <desugar-compat> ast
    ; in-typechecking-phase(
        
        // Set up built-in types before doing any declares
        typecheck-init
        
        // Get built-in imports
      ; where({| ExtraModulesToImport:
            try(import-extra-modules-hook; debug(!"INTERNAL ERROR: import-extra-modules-hook strategies must fail");<exit>1)
          ; extramodules := <bagof-ExtraModulesToImport>
          ; filter(get-imports)     // errors are reported
        |})
        // Declare this module (processes transitive imports)
      ; get-main-import
      ; {| CurrentFile:
           rules(CurrentFile := <FullPath>)
          ; where(
              declare-globals => sig
            ; <write-cache> sig
            ; rules(FileSignature := sig)
          )
        |}
      ; typechecker-after-declare
      ; editor-check(|<FullPath>) => (ast-renamed, err1, warnings, notes)
    )
    ; ast-desugared := <dbg-time(desugar-all | "resolving")> ast-renamed    // declare for resolving
    ; errors := <concat> [err1, <bagof-ImportErrors>]
    ; print-total-log-time
  
  // Call this after editor-analyze-work to calculate dependencies.
  // Returns a list of modules that need to be updated.
  editor-analyze-multifile :
    _ -> dependent-mods
    with  // load old cached version to calculate difference
          update-dependency-graph;
          FullPath => fullpath;
          old-ruleset := <dbg-time(read-old-signature | "read old sig") <+ ![]> fullpath;
          rules(RulesCreatedPrev := old-ruleset);
          dbg-time(
              // Modules that depend on rules that are changed by this update
              find-dependent-modules
            ; where(cleanup-dependency-rules)     // release memory
            ; filter(not(?fullpath))
            ; ?dependent-mods
            ; debug(!"... dependent modules to check: ")
            | "finding dependent mods")  

  
  // Analyze a given set of modules.
  // The modules can queue another set to modules to be checked.
  editor-update-modules =
    rules(Queued := 0); 
    repeat(
      not(?[]);
      {n,updated:
        where(
          n := <add> (<length>, <Queued>);
          set-total-work-units;
          all-keys-UpdatedModules => updated
        );
        map(update-module); concat; uniq;   // returns a list of dependent modules
        // all dynamic rules have been cleared by editor-init
        where(<concat; map(\mod -> <rules(UpdatedModules : mod)> \)> [updated, <id>]);
        filter(not(UpdatedModules));
        rules(Queued := n)
      }
   )
  
  // Parse and analyze a module for errors.
  // * clears all dynamic rules ! *
  update-module: fullpath -> deps
    with  <debug(!"Checking import: ")> fullpath
        ; ast := <parse-file> fullpath
        ; (path, project-path) := <split-fullpath> fullpath
        ; <webdsl-editor-init> (path, project-path, ast)
        ; errors := <editor-analyze-work> ast
        ; deps := <editor-analyze-multifile>
        ; complete-work-unit
        ; <set-markers(|ast)> errors
  
  // Expect that editor-analyze has analyzed the file.
  // Find dependent modules, and queue them for analysis.
  // Also save a cache of our new signature.
  on-save: (selected, position, ast, path, project-path) -> None()
    with on-save-generate-file-to-enable-build
    with on-save-analyze-other-files
      
  on-save-analyze-other-files :
    (selected, position, ast, path, project-path) -> None()
    with  mods := <editor-analyze-multifile>
        ; <queue-analysis> mods
        ; FullPath => fullpath
        ; {| CurrentFile:
              rules(CurrentFile := fullpath)
            ; FileSignature
            ; write-cache
          |}
      
  on-save-generate-file-to-enable-build = write-saved-but-not-built-file
      
  write-saved-but-not-built-file =
    <WriteToTextFile> (<concat-strings>[<project-path>,"/.saved-but-not-built"], "saved")    
    
  find-extra-errors = fail
  
  desugar-all =
      preserve(innermost(desugar-def))
  
  import-main-file: ast -> ast
    with  appname := <AppName>
        ; where(!appname; debug(!"Explicitely importing main file: ")) 
          // TODO: add specific warning referencing application.ini if the main file is not found
        ; <try(get-imports)> Imports(appname) // try: import error is added if failed.
          
  add-app-ini-error: ast -> ast
    with rules(ExtraWarnings :+= (ast, "Cannot find application.ini"))
             
  get-main-import: ast -> ast
    with  FullPath => fullpath
        ; {| ParsingModule:
              rules(ParsingModule := fullpath)
              // try to import main file if we're parsing a module
            ; !ast
            ; try(
                // if checking a module, import main app file
                ?Module(_,_); import-main-file
              )
        |}
 
  get-imports: 
    imp@Imports(x) -> imp
    where {| TopImport: 
         where(try(not(TopImport); rules(TopImport := imp)))
      ; <editor-parse-webdsl-module> x
     |}
