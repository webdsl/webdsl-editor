module parse

imports 
  libwebdsl-front 
  libstratego-sglr
  ../lib/editor-common.generated
  webdsl_editor
  application-ini
  caching
  util

rules
  
  parse-file-1 =
    parse-file(|<get-webdsl-parse-table>)
  
  format-trace(|prefix) =
  		map(\name -> <concat-strings> [prefix, name]\)
  	; separate-by(|"<br/>")
  	; concat-strings
  	; try(not(?""); <concat-strings> ["<br/>", <id>])
  
  report-import-failed(|txt): fullpath -> <fail>
  	with 	trace-entries := <bigbagof-CurrentFile>
  	    ; trace := <format-trace(|"... imported from: ")> trace-entries
  	    ; msg := <concat-strings> [txt, ": ", fullpath, trace]
  		  ; import := <TopImport <+ !"DummyImport(main-app)">
  		  ; rules(ImportErrors :+= (import, msg))
  			
  editor-parse-webdsl-module: x -> x
  	where(
    		full-path := $[[<ApplicationIniDir>]/[x]] // $[[projectdir]/[<DirName>]/[y]]
    	; <file-exists <+ report-import-failed(|"Imported file not found")> full-path
   	)
  ; (open-import-sig(!full-path, parse-file-1, read-import(|full-path), read-import-sigs)
      <+
     <report-import-failed(|"Could not import file")> full-path
    )
  
  // Transitive imports
  read-import(|fullpath) =
    {| ModuleDefs:
        desugar-compat  // simplify module/app constructor
      ; preserve(try(fix-module-name(|fullpath)))
	      // declare for compiler typechecking
	    ; alltd(
         try(get-imports)
        ; strip-bodies
      )
      // another traversal, because declare-global has its own traversal and should not have to call strip-bodies itself
	    ; log-time-helper(alltd(declare-global) | "declare tc")
	    ; <bagof-ModuleDefs> fullpath
	  |} 
	  
  read-import-sigs: signatures -> signatures
    with
    {| ReadingFromCache:
        fullpath := <CurrentFile>
	    ; rules(ReadingFromCache : fullpath)
	    ; <log-time-helper(alltd(declare-global <+ declare-global-toplevel) | "declare global")> signatures
	    ; alltd(get-imports) // do not put this inside of log-time-helper
    |}
    
  // find a node in an ast
  find-node(|sig): ast -> node
    with  <oncetd(?sig; ?node)> ast
        <+ where(!sig; debug(!"Looking for node: ")); fail
  
  get-imported-decl(|mod): sig -> node
    with  ast := <log-time-helper(parse-file-1 <+ debug(!"Parsing failed") | "parse")> mod
        ; if <?Module(_,_)> sig then
              node := <preserve(try(desugar-compat)) // only simplify module constructor
                      ; preserve(strip-mod)
                      > ast
          else
              <log-time-helper(
                     preserve(alltd(strip-bodies); desugar-all)
                  <+ debug(!"desugar/strip failed")
                | "desugar")> ast
            ; node := <log-time-helper(find-node(|sig)
                | "find node desugared ast")>
          end
        ; print-total-log-time
        ; <ensure-ast(|"after get-imported-decl")> node
        