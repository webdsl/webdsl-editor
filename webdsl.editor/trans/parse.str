module parse

imports libwebdsl-front

rules
  
  xtc-parse-webdsl-module-1 = 
    where(id
      ; path := <path-of-xtc-file>
    )
    ; xtc-parse-webdsl-unit-1(|path)
    ; check-for-ambiguities(|path)
    ; try(simplify-module-constructor)
  
  xtc-parse-webdsl-unit-1(|path) =
    with(
        tbl := <get-webdsl-parse-table>
      ; cachepath := <concat-strings> [<DirName>,"/.webdsl-parsecache/",<trim-initial-dots-slashes> path,<get-webdsl-version>,".parsecache"]
      ; dirs := <dirname; string-tokenize(|['/'])> cachepath
      ; <create-dirs> dirs
      )
    ; if <file-exists> path
      then
        if not(<file-exists> cachepath) <+ <gt> (<modification-time> path, <modification-time> cachepath) 
        then
          parse-and-write-cache-1(|path,tbl,cachepath) //current term relevant
        else
           // if cache read fails for some reason, e.g. it contains an invalid term because 
           // the write was interrupted with ctrl+c, then it should just parse again and ignore the cache
           <ReadFromFile> cachepath 
        <+ parse-and-write-cache-1(|path,tbl,cachepath) //current term relevant
        end
      else
        <debug> "File does not exist: "
      ; <trim-initial-dots-slashes;debug> path
      ; <exit> 1
      end
      
  parse-and-write-cache-1(|path,tbl,cachepath) =
   ( parse-xtc-file-pt(err(|["cannot open file ", <trim-initial-dots-slashes> path]), strsglr-report-parse-error | tbl, "Unit", path) 
     <+ not(is-verbose-2); <exit> 1 
   )
   ; implode-with-location-annos-1(|path)
   ; where(
       <WriteToBinaryFile> (cachepath,<id>)
     )
     
  implode-with-location-annos-1(|path) =
   /* asfix-anno-location
  ;*/ implode-asfix
  /*; topdown(
        try(\t {Location(r, c, _, _)} -> t {At(path, r, c)}\)
      )*/