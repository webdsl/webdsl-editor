module webdsl

imports
  libstratego-lib
  libstratego-sglr
  libwebdsl-generator
  libwebdsl-front
  entities
  types
  parse
  properties
  application-ini
  template
  enum
 
signature constructors
  FILE : Term -> Term

strategies // editor service interface

  main-webdsl =
     fatal-err(|"Not designed to be invoked directly")

  collect-markers(s) =
    collect-all(s,conc);
    try(flatten-list);
    map((id,try(concat-strings)))
  
  editor-analyze:
    (ast, path, fullpath) -> (errors, warnings, notes)
    with
      try(dr-scope-all-end); dr-scope-all-start
    //; debug(!"before imports")
    ; init-compiler-builtins
    ; get-all-imports
    //; debug(!"after imports")
    ; ast2 := <declare-and-desugar>
    with
      errors   := <collect-markers(check)> ast2
    ; warnings := <collect-markers(constraint-warning)> ast2
    ; notes    := <collect-markers(constraint-note)> ast2
      
  require(s)=not(s)
  constraint-warning=fail
  constraint-note=fail
  check=fail
  
  declare-and-desugar =
    desugar-all
  ; alltd(declare-def) 
  
  desugar-all = innermost(desugar-def)
  
  des=fail
  
  get-all-imports =
    where(<set-appname> FILE(<get-main-file-name>)) // need to set DirName DR
  //; debug(!<DirName>)
  //; debug(!<AppName>)
  ; where(appname := <AppName>)
  ; rules (IsImported : appname)
  ; topdown(try(get-imports))
  
  get-imports : 
    Imports(x) -> imported
    where not(<IsImported> x)
        ; rules (IsImported : x)
        ; imported := <xtc-parse-webdsl-module-1> FILE(<concat-strings> [x,".app"])//$[[x].app])
        //; strippedimport := <topdown(try(strip-annos))> imported // strip location info
        //; <debug(!"imported: ")> x

  get-imports :
    Imports(x) -> Note([])
    where <IsImported> x
        //; <debug(!"was already imported: ")> x
  
rules

  init-compiler-builtins =
    not(built-in-template-rule-setup
        ; fatal-err-msg(|"error in typechecker.str, failure should not occur here, make sure built-in-template-setup rules end with ';fail'")
        ) // setup dyn rules for checks
  ; not(after-tc-declare-hook
        ; fatal-err-msg(|"error in typechecker.str, failure should not occur here, make sure after-tc-declare-hook rules end with ';fail'")
        ) // setup dyn rules for checks
  