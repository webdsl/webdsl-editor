module webdsl

imports
  libstratego-lib
  libwebdsl-front
  libwebdsl-generator
  //stratego-editor-support

signature constructors
  FILE : Term -> Term

strategies // editor service interface

  main-webdsl =
     fatal-err(|"Not designed to be invoked directly")
 
  editor-analyze:
    (ast, path, projectpath) -> results
    where 
      <set-verbosity> 3;
      set-default-config;
      <chdir> projectpath;
      <chdir> <dirname> path;
      //<try(mkdir)> ".ignoreme";
      debug(!"START");
      //rules ( DirName := <getcwd> ); //:= evaluated here!!!!
      <file-exists <+ mkdir> ".ignoreme";
      ignoremedir := <concat-strings> [<getcwd>, "/.ignoreme"];
      //getcwd;debug(!"CURRENTDIR");
      main-file-name := <conc-strings> ("../",<get-main-file-name>);
      debug(!"MAIN FILE: ");
      mainfile := FILE(main-file-name);
      <chdir> ignoremedir;
      getcwd;debug(!"CURRENTDIR");
      not(<eq> (<modification-time;debug(!"modification time file")> main-file-name, <OldModificationTime;debug(!"modification time DR  ")>))
    ; rules(OldModificationTime := <modification-time> main-file-name)
    ; OldModificationTime;debug(!"new value of modification time DR") 
    with
      try(dr-scope-all-end);
      dr-scope-all-start
    with
      getcwd;debug(!"CURRENTDIR");  
      <set-appname> mainfile;
      !main-file-name;
      results := <//try(avoid-modules); 
        debug(!"before parse"); xtc-parse-webdsl;debug(!"after parse"); //parse initial file 
        webdsl-collect-all-errors; debug(!"collected errors: ")> mainfile;
      <analyze-definitions> ast
  /*
  avoid-modules:
    Module(x, y) -> Application(x, y)
*/
  reference-resolve:
    (reference, position, ast, path, fullpath) -> target
    where
      <debug(!"reference-resolve invoked ")> reference; 
      reference' := <desugar-top> reference;
      target := <find-definition> reference';
      debug(!"reference-resolve resolved ")
  
  reference-info:
    (target, position, ast, path, fullpath) -> info
    where
      <debug(!"reference-info invoked ")> target;
      info := <pp-webdsl-to-string> target

strategies // helpers
  
  /**
   * Get the main file name of a WebDSL project, looking at the
   * application.ini file in the current directory and those above it.
   */
  get-main-file-name =
    <readdir> ".";
    getfirst(
      "application.ini";
      application-ini-to-app-name;
      <add-extension> (<id>,"app")
    )
  <+
    cwd := <getcwd>;
    <chdir> "..";
    not(getcwd => cwd);
    (get-main-file-name <+ <chdir> cwd; fail)

  application-ini-to-app-name:
    filename -> appname
    where
      <read-text-file> filename;
      get-lines;
      debug(!"lines: ");
      getfirst(string-starts-with(|"export APPNAME="));
      debug(!"appname: ");
      <split-after> (<id>, "=");
      ?(_, appname)

strategies // parsing

  asfix-anno-location = id // not supported

  external parse-xtc-file(on-open-error, on-parse-error | tbl, start-symbol, path)
  
  external strsglr-report-parse-error(|)
