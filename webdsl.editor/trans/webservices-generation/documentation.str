module webservices-generation/documentation

imports

	util 
  	lib/editor-common.generated 
  	libwebdsl-generator
  	libwebdsl-front
  	webservices-generation/util
  	
  	
rules
	
  generate-documentation: (selected, position, ast, path, project-path) -> None()
  	with <webdsl-editor-init> (path, project-path, ast) //cleanup DR, set appname DR
        ; <full-app-load(|<dirname> path)> ast //not using editor-analyze like other analysis tasks  
        ; <generate-mobl-model> project-path
  	with body := [<documentation-header>,<documentation-model>]
  		; <create-dir-in-workspace> "webservices" 
  		; <concat-strings; text-to-file(|"webservices/API.md")> body
  		

rules
  documentation-model: x -> documentation 
  	with header := 
  			$[Model Description
 	 		 -----------------------
 	 		 This chapter describes the entities that are used as model for the synchronization framework. This can be used to interpert the data of the expected input and output.
 			 ]
 		; entities := <all-keys-EntDecl> None()	 
 		; filteredEntities := <filter(not(is-builtin-entity-webservices))> entities
  		; body := <map(documentation-model-entity)> filteredEntities	     
 		; documentation := <concat-strings> [header|body]
  	
  
  documentation-model-entity: entityname -> documentation
  	with titlelength := <add> (<string-length> entityname, 6)
  		; documentation :=
  		  	$[###[entityname]###
  		  	[<copy-chars(|titlelength)>"-"]	
  		  	]	
 

rules//helpers
	
  copy-chars(|number): string -> newstring 
  	where <gt>(number,0)
  		; newstring := $[[string][<copy-chars(|<dec>number)> string]]
  		
  	
  copy-chars(|number): x -> x	
   where not (<gt>(number,0))
   
rules//overlays
	
 documentation-header = !
	${Model Description
 	 -----------------------
 	 This chapter describes the entities that are used within the model
 	  
 	  + General Webservice Information
 	  + Model Description
 	  + WebService explanation
 	  
 	  General Webservice Information
 	  ---------------------------------
 	  
 	  The generated services are simple, which means they do not contain many parameters to specify all kind of options on the requested data. The services are meant for synchronization. Nevertheless, they can also be used for requesting of data.

 	  ### Interface ###

 	  All the webservices are available through the following link:
	 
 	  http(s)://<base.url>/webservice/<webservicename>

 	  
 	  *The services are based on JSON and only support post requests*

 	  The default format for all services is:

 	  | field name | type     | explanation               |
 	  |------------|:--------:|---------------------------|
 	  | errors     | [String] | List of error messages    |
 	  | result     | Any      | the result of the service |

 	  
 	  ### Control Flow ###

 	  The first time using the synchronization the following steps are expected:

 	  + possible authentication
 	  + request the toplevel entities for partition selection.
 	  + request timestamp
 	  + request for all entities the objects of the selected partitions 
 	  
 	  Further synchronization contains the following steps:

 	  + send the new objects to the server
 	  + send the updates of modified objects to the server
 	  + request timestamp
 	  + request for all entities the objects of the selected partitions	
 	    	
 }
 
 
    