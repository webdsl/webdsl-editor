module webservices-generation/interface

imports
	fact-extraction/datalog
	libstratego-lib
	libstratego-sglr
	libwebdsl-generator  
  	libwebdsl-front
  	
  	entity-extraction/generate-entity-files
	
	webservices-generation/overlays
		 
  	util 
  	lib/-

rules 
  generate-webservices: (selected, position, ast@Application(_, _), path, project-path) -> None()
  	with	<webdsl-editor-init> (path, project-path, ast) //cleanup DR, set appname DR
        	; <full-app-load(|<dirname> path)> ast //not using editor-analyze like other analysis tasks
  	where	dirname := "webservices/services"
  			; <create-dir-in-workspace> dirname 
  			; testservice :=  <generate-test-webservice>
  			; defs := [NativeClassDispatchServletHelper(), <GetDispatchServletHelper>, <generate-available-services-function>, <generate-interface-service>, testservice]
			; result := <make-valid-page-from-defs(|$[[dirname]/interface])> defs
			; <write-ast-to-file(|$[[dirname]/interface.app])> result
			  	
  generate-webservices: (selected, position, ast, path, project-path) -> "This builder is only supported on the application file" 	
	where not (<?Application(_, _)> ast)
	where fatal-err-msg(|"This builder is only supported on the application file")
rules// generation
	
  generate-available-services-function: x -> function
	where 	services := <bagof-Service>
			; services' := <map(\x -> String(x)\)> services
		  	; function := 
		  	  	Function("getAvialableServices", [], GenericSort("List", [SimpleSort("String")])
    				, Block(
        			[Return(ListCreation(services'))]
      		))
      		
  generate-interface-service: x -> service
  	where 	service := 
  				ServiceFunction("webservices", [Arg("service", SimpleSort("String"))]
    			, Block(
       				[ If(
            			LargerThanOrEqual(
              				Call(ThisCall("getAvialableServices", []), "indexOf", [Var("service")]), Int("0")
            			)
          				, Block([ Stat( Call( ThisCall("getDispatchServletHelper", []), "forwardRequest"
                  			, [Add(Add(String($[/[ServicePrefix()]]), Var("service")), String("/"))]
                 		))])
          				, Block(
		          			[ VarDeclInitInferred("json", ThisCall("JSONObject", []))
		              		, VarDeclInitInferred("errors", ThisCall("JSONArray", []))
		              		, Stat( Call( Var("errors"), "put"
		     					, [Add(Add(String("service "), Var("service")), String(" does not exist"))]
		                  	))
		              		, Stat(Call(Var("json"), "put", [String("errors"), Var("errors")]))
		              		, Return(Var("json"))
	              		])
          )]))

  generate-test-webservice: x -> service
  	where 	rules (Service:+= "test")
  		    ; service := 
  		      	ServiceFunction( $[[ServicePrefix]test], []
					, Block(
    					[ VarDeclInitInferred("json", ThisCall("JSONObject", []))
    					, VarDeclInitInferred("errors", ThisCall("JSONArray", []))
    					, VarDeclInitInferred("message", String("This is a test service"))
    					, Stat(Call( Var("json"), "put", [String("errors"), Var("errors")]))
    					, Stat(Call( Var("json"), "put", [String("result"), Var("message")]))
    					, Return(Var("json"))
   	 			]))	   
    