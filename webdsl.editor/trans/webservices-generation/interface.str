module webservices-generation/interface

imports
	fact-extraction/datalog
	libstratego-lib
	libstratego-sglr
	libwebdsl-generator  
  	libwebdsl-front
  	
  	entity-extraction/generate-entity-files
	
	webservices-generation/overlays
	webservices-generation/mapper
	webservices-generation/mobl/mapper
	webservices-generation/mobl/sync-services
	webservices-generation/sync-services
	webservices-generation/related-entities
	webservices-generation/util	
	webservices-generation/authentication
		 
  	util 
  	lib/editor-common.generated 

overlays
	DirServices = "webservices/services"
rules
	 
  generate-webservices: (selected, position, ast, path, project-path) -> None()
  	where 	<try(simplify-application-constructor); ?Application(_, _) > ast
  	with	<webdsl-editor-init> (path, project-path, ast) //cleanup DR, set appname DR
        	; <full-app-load(|<dirname> path)> ast //not using editor-analyze like other analysis tasks
        	  
  	where	topEntity* := <declare-top-entities> ast
  			; <generate-related-entities-functions> project-path
  			; dirname := DirServices()
  			; <create-dir-in-workspace> dirname 
  			; make-mobl-mapper-for-all-entities
  			; TL := <generate-top-level-webservice>
  			; testservice :=  <generate-test-webservice> 
  			; generate-timestamp-webservice   
  			; generate-mobl-services
  			; generate-sync-services
  			; if(generate-authentication-webservice-module)then 
  			  	imports := def*
					|[
					  	imports webservices/related-entities/main 
					  	imports webservices/mappers/main
					  	imports webservices/json/main
					  	imports webservices/authentication
					]|
  			  else 
		  		imports := def*
					|[
					  	imports webservices/related-entities/main 
					  	imports webservices/mappers/main
					  	imports webservices/json/main
					]|
		  	end   
  			; <generate-edit-mappers> project-path  
  			; modules := <bagof-Service; string-sort; map(\servicename ->Imports( $[[dirname]/[servicename]] )\)> None()
  			; defs := [NativeClassDispatchServletHelper(), <GetDispatchServletHelper>,
  			  		   <generate-available-services-function>, <generate-interface-service>,
  			  		   <get-general-service-functions>]
			; defs' := <concat> [modules,imports, defs]
			; result := <make-valid-page-from-defs(|$[[dirname]/interface])> defs'
			; <write-ast-to-file(|$[[dirname]/interface.app])> result
			  	
  generate-webservices: (selected, position, ast, path, project-path) -> "This builder is only supported on the application file" 	
	where not (<?ApplicationDefs(_, _, _) <+ ?Application(_, _) > ast)
	where fatal-err-msg(|"This builder is only supported on the application file")
	
rules// generation
	
  generate-available-services-function: x -> function
	where 	services := <bagof-Service>
			; e_services* := <map(\x -> String(x)\)> services
      		; function := def 
      		  |[
      		  	function getAvailableServices() : Set<String> {
      		  	 return {e_services*};
      		  	}
      		  ]|
      		
  generate-interface-service: x -> service
  	where service := def 
	          |[
	          	service webservice ( service : String ) {
	  				if ( service in getAvailableServices() ) {
	    				getDispatchServletHelper().forwardRequest("/webservice_generated_" + service + "/");
	  				} else {
					    var json := JSONObject() ;
					    var errors := JSONArray() ;
					    errors.put("service " + service + " does not exist");
					    json.put("errors", errors);
					    return json;
	  				}
				}
			]|

  generate-service(|name): stat_body -> service
  	where not(<bagof-Service; fetch-elem(?name)> name )
  	where 	rules (Service:+= name)
  			; stat_init := InitService()
  			; stat_exit := <ExitService>
  			; x_servicename :=  $[[ServicePrefix][name]]
   	 		; service  := def 
	          |[
	          	service x_servicename () {
					stat_init
					stat_body
					stat_exit	
				}
			  ]|          	   
   	 			
  generate-test-webservice: x -> service
  	where 	service := <generate-service(|"test")> stat|[var result := "This is a test service";]|  			
  			; service-to-file(|"test") 
  
  generate-timestamp-webservice: x -> service
  	where 	service := <generate-service(|"getTimeStamp")> stat|[var result := now().getTime();]|  			
  			; service-to-file(|"getTimeStamp") 			  
  	 
  generate-top-level-webservice: x -> service
 	where 	x_varname := <new> "ent"
 			; topEntities := <TopEntity ; map(Fst)>
            ; stat_loops* := <map(generate-top-level-webservice-forloops)> topEntities
            ; body := webdsl 
              |[
              	var result := JSONArray();
              	stat_loops*
              ]|  		
            ; service := <generate-service(|"getTopLevelEntities")> body
        	; service-to-file(|"getTopLevelEntities") 
   
  generate-top-level-webservice-forloops: x_entity -> statement 
  	where 	x_entityString := $["[x_entity]"]
  			; statement := webdsl 
	  		|[	
	  			var array := JSONArray();
	  			var jsonobj := JSONObject();
	  			for(topent : x_entity in  x_entity.all()){
	              	array.put(topent.toSimpleJSON());
	            }
	            jsonobj.put("name", x_entityString );
	            jsonobj.put("value", array);
	            result.put(jsonobj);
	  		]|    
  		 	     
  service-to-file(|name): service -> service
  	where 	modname := $[[DirServices()]/[name]]
  			; ast := <make-valid-page-from-defs(|modname)>[service]
  			; write-ast-to-file(|$[[modname].app])
  	// where ast 	
  	
rules //general functions
	
  get-general-service-functions: x -> defs
  	where defs := webdsl 
  	|[
  		function addDirtyFalse(json : JSONObject) : JSONObject {
			json.put("dirty", "false");
			return json;
		}
		
		function makeJSONErrorObject(message : String, type : String) : JSONObject {
			var json := JSONObject();
			json.put("message", message);
			json.put("type", type);
			return json;
		}
		
		function makeJSONEntityErrorObject(errors : JSONArray, ent : String, id : String) : JSONObject {
			var json := JSONObject();
			json.put("errors", errors);
			json.put("ent", ent);
			json.put("id", id);
			return json;
		}
		
		function addValidationExceptionsToLocalErrors(errors : List<NativeValidationException>, localErrors : JSONArray) {
			for(ex : NativeValidationException in errors){
		    	localErrors.put(makeJSONErrorObject(ex.getErrorMessage(), "error"));
			}
		}
		
		function addValidateExceptionsToErrors(exceptions : ValidationExceptionMultiple, errors : JSONArray) {
			for(ex : ValidationException in exceptions.exceptions) {
				errors.put(makeJSONErrorObject(ex.message, "error"));
			}
		}
		
		function containsErrorInJSONArray(array : JSONArray) : Bool {
			for ( count : Int from 0 to array.length() ) {
				if(array.getJSONObject(count).getString("type") == "error") {
					return true;
				}
			}
			return false; 
		 }
  	]|	 	   	  	      	