module webservices-generation/util

imports   	
	libwebdsl-generator
	trans/util
	lib/editor-common.generated
	
	libwebdsl-front

rules
	
  get-subclasses-of-entity: entity -> children
  	with directChildren := <bagof-SubClass> entity
  		; subchildren := <map(get-subclasses-of-entity); flatten-list> directChildren
  		; children := <concat> [directChildren, subchildren]
  		    
  get-superclasses-of-entity: entity -> parents
  	where not ("Entity" := <Extends> entity)   
  	with directparent := <Extends> entity
  		; superparents := <get-superclasses-of-entity> directparent
  		; parents := [ directparent | superparents]	
 		
  get-superclasses-of-entity: entity -> ["Entity"]
  	where "Entity" := <Extends> entity    
  	
  get-superclasses-of-entity: entity -> []
  	where not( <Extends> entity)    
  	
  generate-dr-for-highest-parent: e@EntityNoSuper(name, props) -> e
   	with rules(
   		get-highest-parent : name -> name
   	)
  
  generate-dr-for-highest-parent: e@Entity(name, super, props) -> e
   	with parent := <find-highest-parent> name
   		; rules(
   			get-highest-parent : name -> parent
   		)
  
  find-highest-parent: name -> parent
  	where parent := <Extends; find-highest-parent> name 	
  
  find-highest-parent: name -> name
  	where "Entity" := <Extends> name  	
  	
  all-properties-with-entity-anno-inculding-entityproperties: entityname -> properties
  	with properties := <all-entity-properties-tuples; map(\(x,y) -> <add-anno(|FromEntity(x))> y\)>

  all-properties-with-entity-anno: entityname -> properties
  	with properties := <all-properties-with-entity-anno-inculding-entityproperties; filter(not(has-anno(?FromEntity("Entity"))))> entityname
  	
  entity-extends-or-is-extended: entityname -> entityname
  	where  <SubClass> entityname
  	
  entity-extends-or-is-extended: entityname -> entityname
  	where parent := <Extends>  entityname
  	where not(?<"Entity"> parent)
  	
  // declare-top-entities: ast -> topEntity*
  // 	where topEntity* := <collect-all(\DeriveWebServices(ent, prop)->(ent, prop)\)> ast
  // 		; rules (TopEntity2 := topEntity* )		  
  
  is-top-entity-by-dr: entityName -> entityName
  	where <TopEntity> entityName
  
  get-all-top-entity-tuples: x-> topents
 	with topents := <all-keys-TopEntity; map(\y -> (y, <TopEntity> y)\)>
  
  is-top-entity-mobl-by-dr: entityName -> entityName
  	where get-subclasses-of-entity
  		; filter(is-top-entity-by-dr)
  	where not(?[])
	
 is-builtin-entity-webservices: entity -> entity
   	where (? EntityNoSuper(name, _) 
     		<+ ?Entity(name, _, _))
     	<+ is-string; ?name
     	; <is-builtin-entity> name	
     	<+ (builtin-entities := ["AuthenticationKey"]
     		; <fetch(?name)> builtin-entities)  