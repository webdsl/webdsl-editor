module webservices-generation/mobl/model-to-mobl

imports
	fact-extraction/datalog
	libstratego-lib
	libstratego-sglr
	libwebdsl-generator
  	libwebdsl-front

  	util 
  	lib/-
  	webservices-generation/util
  	
  	lib/mobl/MoBL
  	lib/mobl/editor-common.generated
  	
  	entity-extraction/generate-entity-pages
  	webservices-generation/overlays
  	webservices-generation/mobl/simple-view  
 
rules 

  generate-mobl-model: (selected, position, ast@Application(_, _), path, project-path) -> None()
  	with	<webdsl-editor-init> (path, project-path, ast) //cleanup DR, set appname DR
        	; <full-app-load(|<dirname> path)> ast //not using editor-analyze like other analysis tasks
  	where	
  			 topEntity := <collect-one(\DeriveWebServices(ent, prop)->(ent, prop)\)> ast
  			; rules (TopEntity := topEntity )
  			; dirname := "webservices/mobl"
  			; <create-dir-in-workspace> dirname
  			; <Fst; generate-top-level-SyncProperty; generate-top-level-lastSynced-Property> topEntity 
  			; entities := <all-keys-EntDecl> None()	 
  			; filteredEntities := <filter(not(is-builtin-entity))> entities
  			; <map(EntDecl; generate-dr-for-highest-parent)> filteredEntities 
  			; completeEntities := <map(generate-extra-properties-for-collections); filter(where(entity-has-no-super)); map(make-entity-with-properties)> filteredEntities //TODO: filter only subEntitties
  			; result := <map(entity-to-mobl-entity); make-mobl-model-viewers; make-valid-page-from-mobl-defs(|dirname, "model")> completeEntities
  			; module-to-moblfile(|dirname, "model")
  			; <refresh-workspace-file> $[[project-path]/[dirname]]   
  			//   make-mobl-model-viewers
  			  
 generate-mobl-model: (selected, position, ast, path, project-path) -> "This builder is only supported on the application file" 	
	where not (<?Application(_, _)> ast)
	where fatal-err-msg(|"This builder is only supported on the application file")
 
rules // file stuff
	
  module-to-moblfile(|dirname, file): mod -> mod
  	where	<file-exists> $[[<project-path>]/[dirname]]
  			; filename := $[[<project-path>]/[dirname]/[file].mobl]
	  		; <write-mobl-ast-to-file(|filename)> mod  
	  		  
rules //lookup  			   
  
  make-entity-with-properties : entityname -> EntityNoSuper(entityname, [props_entity*|props*])
  	where 	props_entity* := <concat> [[VersionProperty1()],<get-properties-of-entity-mobl-model> entityname]
  			; props_childeren := <get-subclasses-of-entity; map(get-properties-of-entity-mobl-model); flatten-list> entityname	//todo:  this is also something for flatening subclasses only don't like the subclasses having same property names thing
  			; names-to-rename := <map(get-property-name); find-doubles> 
  			; props* := <map(rename-prop-with-classname(|names-to-rename))> props_childeren
  				
  get-properties-of-entity-mobl-model: entityname -> props
  	where  	props := <concat> [<all-properties; filter(where(has-anno(?FromEntity(entityname))))> entityname, <bagof-ExtraInverseProperty> entityname, <bagof-ExtraProperty> entityname]
  	// TODO: Also only got properties from own entity
  	
  check-searchable-anno: property -> mobl-anno |[searchable]| 
   	where 	<is-searchable-prop> property  
  			; <get-property-type; ?SimpleSort(type)> property
  			; <fetch-elem(?type)> ToMoblStringTypes()  
  			  
  check-inverse-anno: Property(_, _, _, annos) ->  mobl-anno |[inverse : x_name ]|
    where	<fetch-elem(?InverseAnno(class, name))> annos
    		; x_name := <get-renamed-prop <+ !name> (class, name) //TODO : class hierarchie fix for flatten
    
  check-inverse-anno(|class): property -> mobl-anno |[inverse : x_otherprop ]| 
  	where not 	(<get-property-annos; fetch(?InverseAnno(_, _))> property)
    where 	<get-property-type; ?GenericSort(_,_)> property
    		; propertyname := <get-property-name> property
    		; propertyname' := <get-original-propname-name <+ id>   // todo: hirarchie flatten
    		; class' := <(get-anno(?FromEntity(x)); !x) <+ !class> property    // todo: hirarchie flatten
    		; (otherEnity, x_otherprop) := <InverseProperty> (class', propertyname')
    		; x_otherprop' :=  <get-renamed-prop <+ !x_otherprop> (otherEnity, x_otherprop)  // todo: hirarchie flatten
  			
  		
 check-inverse-anno(|class): property ->  anno
  	where not 	(<get-property-annos; fetch(?InverseAnno(_, _))> property)
    where 	<get-property-type; ?GenericSort(_,_)> property
    		; propertyname := <get-property-name> property
    		; propertyname' := <get-original-propname-name <+ id>   // todo: hirarchie flatten
   			; anno := <ExtraInverseAnno> (class, propertyname')
    where not	(<InverseProperty> (class, propertyname'))
   
rules //rename(subclasses stuf)
	
	rename-prop-by-dr: Property(name, k, str, annos){anno*} -> Property(newname, k, str, annos){anno*}
		where 	class := <fetch-elem(?FromEntity(x)); !x> anno* 
			    ; newname := <get-renamed-prop <+ !name> (class, name) //TODO : class hierarchie fix for flatten

	rename-prop-by-dr: DerivedProperty(name, k, str, annos, derive){anno*} -> DerivedProperty(newname, k, str, annos, derive){anno*}
		where 	class := <fetch-elem(?FromEntity(x)); !x> anno* 
			    ; newname := <get-renamed-prop <+ !name> (class, name) //TODO : class hierarchie fix for flatten
		  				  
	rename-prop-by-dr: PropertyNoAnno(name, k, str){anno*} -> PropertyNoAnno(newname, k, str){anno*}
		where 	class := <fetch-elem(?FromEntity(x)); !x> anno* 
			    ; newname := <get-renamed-prop <+ !name> (class, name) //TODO : class hierarchie fix for flatten
				  
	rename-prop-by-dr: DerivedPropertyNoAnno(name, k, str, derive){anno*} -> DerivedPropertyNoAnno(newname, k, str, derive){anno*}
		where 	class := <fetch-elem(?FromEntity(x)); !x> anno* 
			    ; newname := <get-renamed-prop <+ !name> (class, name) //TODO : class hierarchie fix for flatten
 				  
	rename-prop-with-classname(|names-to-rename): p -> p
		where 	prop-name := <get-property-name> p
				; not (<fetch-elem(?prop-name)> names-to-rename) 
	
	rename-prop-with-classname(|names-to-rename): Property(name, k, str,annos){anno*} -> Property(newname, k, str,annos){anno*}
		where 	<fetch-elem(?name)> names-to-rename
				; <fetch-elem(?FromEntity(x))> anno*
				; newname := $[[x]_[name]] 
				; rules(
				  	get-renamed-prop :+ (x, name) -> newname
				  	get-original-propname-name :+ newname -> name
				  ) 

	rename-prop-with-classname(|names-to-rename): DerivedProperty(name, k, str,annos, derive){anno*} -> DerivedProperty(newname, k, str,annos, derive){anno*}
		where 	<fetch-elem(?name)> names-to-rename
				; <fetch-elem(?FromEntity(x))> anno*
				; newname := $[[x]_[name]] 
				; rules(
				  	get-renamed-prop :+ (x, name) -> newname
				  	get-original-propname-name :+ newname -> name
				  ) 
				  				  
	rename-prop-with-classname(|names-to-rename): PropertyNoAnno(name, k, str){anno*} -> PropertyNoAnno(newname, k, str){anno*}
		where 	<fetch-elem(?name)> names-to-rename
				; <fetch-elem(?FromEntity(x))> anno*
				; newname := $[[x]_[name]] 
				; rules(
				  	get-renamed-prop :+ (x, name) -> newname
				  	get-original-propname-name :+ newname -> name
				  ) 

				  
	rename-prop-with-classname(|names-to-rename): DerivedPropertyNoAnno(name, k, str,derive){anno*} -> DerivedPropertyNoAnno(newname, k, str, derive){anno*}
		where 	<fetch-elem(?name)> names-to-rename
				; <fetch-elem(?FromEntity(x))> anno*
				; newname := $[[x]_[name]] 
				; rules(
				  	get-renamed-prop :+ (x, name) -> newname
				  	get-original-propname-name :+ newname -> name
				  ) 
				  
rules //generation 
	
  generate-extra-properties-for-collections: entityname -> entityname
	where	props := <all-properties> entityname
			; propswithoutinvers := <filter(generic-type-has-no-inverse-anno(|entityname))>
			; map(declare-extra-prop(|entityname))

  generic-type-has-no-inverse-anno(|class): property ->  property
  	where not 	(<get-property-annos; fetch(?InverseAnno(_, _))> property)
    where 	<get-property-type; ?GenericSort(_,_)> property
    		; propname := <get-property-name> property
    where not	(<InverseProperty> (class, propname))
    
  declare-extra-prop(|class): property -> property
  	where 	entity := <get-property-type; srt-to-type> property
  			; propertyname := <get-property-name> property
  			; newProperty := <generate-inverse-property(|class)> property
  			; x_newPropertyName := <get-property-name> newProperty 
  			; parent := <get-highest-parent>class // TODO: fix the flat hirarchie stuff 
  			; rules(
  				ExtraInverseProperty:+ entity -> newProperty
  				ExtraInverseAnno: (parent, propertyname) -> mobl-anno |[inverse : x_newPropertyName ]|
  			)
  
  generate-top-level-SyncProperty: entityname -> entityname
   	where 	property := PropertyNoAnno("sync", Simple(), SimpleSort("Bool"))
   			; rules( ExtraProperty:+ entityname -> property)
   
  generate-top-level-lastSynced-Property: entityname -> entityname
   	where 	property := PropertyNoAnno("lastSynced", Simple(), SimpleSort("Int"))
   			; rules( ExtraProperty:+ entityname -> property)			  
   
  generate-inverse-property(|class): property ->  Property(name, Ref() , GenericSort("List", [SimpleSort(class)]), [InverseAnno(class, propertyname)])
    where 	proptype := <get-property-type; ?GenericSort("List", _)> property
    		; propertyname := <get-property-name> property
    		; name := $[generatedPropertyForInverse_[class]_[propertyname]]    
   
  generate-inverse-property(|class): property -> PropertyNoAnno(name, Ref() , SimpleSort(class))
    where 	proptype := <get-property-type; ?GenericSort("Set", _)> property
    		; propertyname := <get-property-name> property
    		; name := $[generatedPropertyForInverse_[class]_[propertyname]]  		   
rules //transform 

  entity-to-mobl-entity: EntityNoSuper(x_name, props) -> moblEntity
  	where	cleanedProps  := <map(try(remove-derive-from-property))> props
  			; ebd_props* := <filter(property-to-mobl-property(|x_name))>
 			; moblEntity := mobl-def 
 			  |[
 			  	entity x_name {
 			  		ebd_props*
 			  	}	
 			  ]|
 			  
  property-to-mobl-property(|class): p@Property(x_name, sort, type, annos) -> result
  	where 	t_newType := <type-to-mobl-type> type
  			; if (a_newannos := <annos-to-mobl-annos(|class)> p) 
  				then  result := mobl-entBodyElem |[x_name : t_newType (a_newannos) ]| 
  				else  result := mobl-entBodyElem |[x_name : t_newType ]| 
  			end
  			
  property-to-mobl-property(|class): p@PropertyNoAnno(x_name, sort, type) -> result
  	where 	t_newType := <type-to-mobl-type> type
  		  	; if (a_newannos := <annos-to-mobl-annos(|class)> p) 
  				then  result :=  mobl-entBodyElem |[x_name : t_newType (a_newannos) ]|
  				else  result :=  mobl-entBodyElem |[x_name : t_newType ]| 
  			end
  
  annos-to-mobl-annos(|class): property -> result
  	where 	anno* := [<check-searchable-anno <+ !None()> property|[]]
  			; anno'' := [< check-inverse-anno <+ check-inverse-anno(|class) <+ !None()> property|anno*]
  			; result := <filter(not(?None()))>
  			; length; int-gt(|0) 
    
rules // type transformations  	
  type-to-mobl-type: SimpleSort(type) -> mobl-t|[String]| 
   	where 	<fetch(?type)> ToMoblStringTypes
  
  type-to-mobl-type: SimpleSort(type) -> mobl-t|[Num]|
   	where 	<fetch(?type)> ToMoblNumTypes

  type-to-mobl-type: SimpleSort("Bool") -> mobl-t|[Bool]| 
 
  type-to-mobl-type: SimpleSort(type) -> mobl-t|[DateTime]|
  	where 	<fetch(?type)> MoblDateTimeTypes 

  type-to-mobl-type: SimpleSort(x_type) -> mobl-t|[x_newType]|
   	where 	x_newType := <IsEntity; get-highest-parent> x_type // TODO: this only works for flatten subentities
   	where not (<is-builtin-entity> x_type)
  
  type-to-mobl-type: GenericSort(_, type) -> mobl-t|[Collection<t_paramtype>]| 
   	where	<Hd; is-entity-type> type
   		 	; t_paramtype := <Hd; type-to-mobl-type> type 