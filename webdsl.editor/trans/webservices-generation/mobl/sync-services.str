module webservices-generation/mobl/sync-services
imports 
	  	lib/mobl/MoBL
  		lib/mobl/editor-common.generated 
  		
  		webservices-generation/mobl/model-to-mobl
  		webservices-generation/mobl/unsynced-functions
     	webservices-generation/model-tree
  	  	
  	  	util 
	  	lib/-
rules 
	
  generate-mobl-services: x -> x
	where  dirname := "webservices/mobl"
  			; <create-dir-in-workspace> dirname
  			; generate-mobl-unsynced-functions  
  			; generate-mobl-top-level-service
  			; entities :=  <all-keys-EntDecl; filter(not(is-builtin-entity))> None()	
  			; <map(generate-mobl-sync-service)> entities
  			; generate-mobl-timestamp-service 
  			; generate-mobl-edit-service   
  			; syncfunctions := <map(generate-mobl-sync-functions)> entities  
  			; totalsyncfunction := <generate-mobl-total-sync-function>
  			; editsyncfunction := <generate-mobl-edit-sync-function>  entities  
  			; service := <bundle-services> None()
  			; imports :=  mobl-def* 
  			  |[
  			  	import webservices::mobl::mapper
  			  	import webservices::mobl::model
  			  	import webservices::mobl::unsync
  			  ]|  
  			; result := <concat> [imports, service, syncfunctions, [totalsyncfunction], [editsyncfunction]]
  			; <make-valid-page-from-mobl-defs(|dirname, "sync")> result
  			; module-to-moblfile(|dirname, "sync")
  			; <refresh-workspace-file> $[[<project-path>]/[dirname]]   
	 

  bundle-services: x -> result
 	where 	sve_resources* := <bagof-ServiceMobl>None()
			; result := mobl-def* 
			  |[
			  	  service Sync {
			  	  	sve_resources*
			  	  }
			  ]|
			  	
  generate-mobl-top-level-service: x -> x
  	where	(name,prop) := <TopEntity> 	
          	; x_mapper := $[[name]Mapper]	
          	; service := mobl-serviceElem 
          	  |[
          	  	resource getTopLevelEntities(): void{
          	  		uri = "webservice/getTopLevelEntities"
     				method = "PUT"
      				data = {}
      				mapper = x_mapper
          	  	}
          	  ]|	
          	; rules (ServiceMobl:+= service)
  
  generate-mobl-sync-service: entity -> entity
  	where  	e_uri := $["webservice/sync[entity]"]
          	; x_servicename := $[sync[entity]]
          	; x_mapper := $[[entity]Mapper]		
           	; service := mobl-serviceElem 
          	  |[
          	  	resource  x_servicename (arg : JSON): void{
          	  		uri = e_uri
     				method = "PUT"
      				data = JSON.stringify(arg)
      				mapper = x_mapper
          	  	}
          	  ]|
           ; rules (ServiceMobl:+= service)
 
rules //timestamp service 
	
  generate-mobl-timestamp-service: x -> x
  	where  	service := mobl-serviceElem 
          	  |[
          	  	resource  getTimeStamp (): Num{
          	  		uri = "webservice/getTimeStamp"
     				method = "PUT"
      				mapper = timeStampMapper
          	  	}
          	  ]|
           ; rules (ServiceMobl:+= service)	
  
rules // editService
	
  generate-mobl-edit-service: x -> x
  	where  	service := mobl-serviceElem 
          	  |[
          	  	resource  sendEdits (arg : [JSON]): void {
          	  		uri = "webservice/syncDirtyObjects"
     				method = "PUT"
     				data = JSON.stringify(arg)
      				mapper = errorMapper
          	  	}
          	  ]|
           ; rules (ServiceMobl:+= service)	
  
  generate-mobl-edit-sync-function: entities -> function  
    where	stat_objectstatement* := <map(generate-sync-edit-mobl-statements)> entities			
 			; function := mobl-def 
 			  |[
 			  	 function syncEdits() {
 			  	 	setSyncFlag(true);
   				 	var array : [JSON] = [];
    				stat_objectstatement*
    				Sync.sendEdits(array);
    				setSyncFlag(false);
 				}
 			  ]|    
 			   
  generate-sync-edit-mobl-statements: x_entity -> statements
    where 	x_topEntity := <TopEntity; Fst>
 			; <?x_topEntity> x_entity
    		; x_entityname := $["[x_entity]"]
    		; statements := mobl-stat*
   				|[
					var value = x_entity.all().filter("sync", "=",true).filter("dirty", "=", true).selectJSON(["*"]);	
					var json = Dynamic(name=x_entityname, value=value);
					array.push(json);
   				]|
  
  generate-sync-edit-mobl-statements: x_entity -> statements
    where 	x_topEntity := <TopEntity; Fst>
 	where not( <?x_topEntity> x_entity )
    where	x_entityname := $["[x_entity]"]
    		; statements := mobl-stat*
   				|[
					var value = x_entity.all().filter("dirty", "=", true).selectJSON(["*"]);	
					var json = Dynamic(name=x_entityname, value=value);
					array.push(json);
   				]|				        

	            
rules // generation of sync-functions
	 
 generate-mobl-sync-functions: entity -> function
 	where	stat_objectstatement := <get-all-mobl-objects-of-entity-statement>			
 			; x_functionname := $[syncAll[entity]]
 			; e_logstring := $["time needed for syncing [entity]: "]
 			; function := mobl-def 
 			  |[
 			  	 function x_functionname() {
   				 	var begin = now();
    				stat_objectstatement
    				log(e_logstring + ( ( now() - begin ) / 1000 ).toString());
 				}
 			  ]|
 			  
 get-all-mobl-objects-of-entity-statement: x_entity -> statement
 	where x_topEntity := <TopEntity; Fst>
 	where not( <?x_topEntity> x_entity )
 	where	x_servicename := $[sync[x_entity]]
          	; statement := mobl-stat |[ Sync.x_servicename(x_topEntity.all().filter("sync", "=", true).selectJSON(["id", "lastSynced"]));]|
          	  				  
 
 get-all-mobl-objects-of-entity-statement: x_entity -> statement
 	where	x_topEntity := <TopEntity; Fst>
 			; <?x_topEntity> x_entity
 			; x_servicename := $[sync[x_entity]]
			; statement := mobl-stat |[ Sync.x_servicename(x_topEntity.all().filter("sync", "=", true).selectJSON(["id", "lastSynced"]));]|
	
 generate-mobl-total-sync-function:	x -> function
 	where 	stat_calls* := <Fst; generate-list-sync-calls> <TopEntity>
   			; function := mobl-def 
   			  |[
   			  	function syncAll() {
   			  		setSyncFlag(true);
   			  		var begin = now();
   			  		stat_calls*
   			  		log("totaltime:" + ((now() - begin) / 1000).toString());
   			  		setSyncFlag(false);
   			  	}
   			  ]|
   			   
 generate-list-sync-calls: x_topEntity -> list
 	where 	orderedentities := <make-node-of-entity(|[]); bf-collect(is-string); uniq> x_topEntity
 			; stat_firstsyncs* :=<map(make-sync-call)> orderedentities
 			; list := mobl-stat* 
 			  |[
 			  	var time = Sync.getTimeStamp();
 			  	stat_firstsyncs*
 			  	foreach(tl in x_topEntity.all().filter("sync", "=", true) ) {
 			  		tl.lastSynced = time;
 			  	}
 			  ]|
 			  
 make-sync-call: entityname -> call
 	where x_servicename := $[syncAll[entityname]]
 		  ; call := mobl-stat |[x_servicename();]|
 		    