module webservices-generation/mobl/mapper
imports 
	  	lib/mobl/MoBL
  		lib/mobl/editor-common.generated 
  		webservices-generation/mobl/model-to-mobl
     
     	webservices-generation/util
  	  
  	  	util  
	  	lib/editor-common.generated
	  	
  		libwebdsl-generator
rules 
	
  make-mobl-mapper-for-all-entities: x -> x
  	with dirname := "webservices/mobl"
  		; <create-dir-in-workspace> dirname  
  		; entities := <all-keys-EntDecl> None()	  
  		; filteredEntities := <filter(not(is-builtin-entity-webservices); where(entity-has-no-super))> entities
  		; entitymappers := <map(make-mobl-mapper-for-entity)>
  		; importstate := mobl-def |[import webservices::mobl::model]|
  		; result := <concat> [entitymappers, <default-mappers>, <generate-mobl-authenication-service-mappers <+ ![]>, [importstate, <topEntities-mobl-mapper>]]
  		; <make-valid-page-from-mobl-defs(|dirname, "mapper")> result
  		; module-to-moblfile(|dirname, "mapper")
  		; <refresh-workspace-file> $[[<project-path>]/[dirname]]   
		 
  make-mobl-mapper-for-entity: x_name -> mapper
	with x_functionName := $[[x_name]Mapper]
        ; mapper := mobl-stat 
        	|[
            	function x_functionName (json : JSON) {
   		 			if (json.errors && json.errors.length > 0) {
      					log(json.errors);
    				} else {
      					foreach(ent : JSON in json.result) {
      						x_name.fromSelectJSON(ent);
      					}
    				}
  				}	
			]|
  
  topEntities-mobl-mapper: x -> mapper
	with stat_typeif* := <map(generate-mobl-topentity-check)> <all-keys-TopEntity>
		; mapper := mobl-stat 
        	|[
              	function TopLevelEntities_Mapper (json : JSON) {
      				foreach(topent : JSON in json.result) {
						stat_typeif*
      				}
  				}	
            ]|
  
  generate-mobl-topentity-check: x_entity -> statement
  	with x_entityString := String(x_entity)
  		; x_parent := <find-highest-parent> x_entity
  		; statement := mobl-stat* 
  			|[
  				if ( topent.name == x_entityString ) {
  					foreach(ent : JSON in topent.value) {
  						if(! x_parent.load(ent.id)) {
  							x_parent . fromSelectJSON ( ent );
  						}
  					}
				}
  			]|	
              
  default-mappers: x -> mapper
    with mapper := mobl-stat* 
			|[
              	function timeStampMapper (json : JSON) : Num {
   		 			if (json.errors && json.errors.length > 0) {
      					log(json.errors);
    				} else {
      					return json.result;
    				}
  				}	
  				
  				function voidMapper (json : JSON) : void {
   		 			if (json.errors && json.errors.length > 0) {
      					log(json.errors);
    				}
  				}		
  				
  				function errorMapper (json : JSON) : JSON {
   		 			if (json.errors) {
      					return json.errors;
    				}
  				}		 
			]|

rules //authentication
			 				
  generate-mobl-authenication-service-mappers: x -> services
	where principal := <PrincipalDecl>
	with services := mobl-def* 
			|[
				function boolMapper ( json : JSON ) : Bool {
				    if ( json . errors && json . errors . length > 0 )
				    {
				      log(json.errors);
				    }
				    	return json.result;
				}
				
				function deviceKeyMapper ( json : JSON ) : String {
				    if ( json . errors && json . errors . length > 0 )
				    {
				      log(json.errors);
				    }
				    	return json.result;
				}
			]|  