module webservices-generation/mobl/mapper
imports 
	  	lib/mobl/MoBL
  		lib/mobl/editor-common.generated 
  		webservices-generation/mobl/model-to-mobl
     
     	webservices-generation/util
  	  
  	  	util  
	  	lib/editor-common.generated
	  	
  		libwebdsl-generator
rules 
	
  make-mobl-mapper-for-all-entities: x-> x
  	where	dirname := "webservices/mobl"
  			; <create-dir-in-workspace> dirname  
  			; entities := <all-keys-EntDecl> None()	  
  			; filteredEntities := <filter(not(is-builtin-entity); where(entity-has-no-super))> entities
  			; result := <map( make-mobl-mapper-for-entity); 
  			  	add-elem-to-list(|<void-mobl-mapper>);
  			  	add-elem-to-list(|<time-mobl-mapper>);
  			  	add-elem-to-list(|<error-mobl-mapper>);
  			  	add-elem-to-list(|<topEntities-mobl-mapper>);
  			  	add-elem-to-list(|mobl-def |[import webservices::mobl::model]|)> filteredEntities
  			; <make-valid-page-from-mobl-defs(|dirname, "mapper")> result
  			; module-to-moblfile(|dirname, "mapper")
  			; <refresh-workspace-file> $[[<project-path>]/[dirname]]   
		 
 
  make-mobl-mapper-for-entity: x_name -> mapper
	where 	x_functionName := $[[x_name]Mapper]
            ; mapper := mobl-stat 
              |[
              	function x_functionName (json : JSON) {
   		 			if (json.errors && json.errors.length > 0) {
      					log(json.errors);
    				} else {
      					foreach(ent : JSON in json.result) {
      						x_name.fromSelectJSON(ent);
      					}
    				}
  				}	
              ]|
  
  topEntities-mobl-mapper: x -> mapper
	where 	stat_typeif* := <map(Fst; generate-mobl-topentity-check)> <TopEntity>
			; mapper := mobl-stat 
              |[
              	function TopLevelEntities_Mapper (json : JSON) {
      				foreach(topent : JSON in json.result) {
						stat_typeif*
      				}
  				}	
              ]|
  
  generate-mobl-topentity-check: x_entity -> statement
  	where  	x_entityString := String(x_entity)
  			; x_parent := <find-highest-parent> x_entity
  			; statement := mobl-stat* 
  			|[
  				if ( topent.name == x_entityString ) {
  					foreach(ent : JSON in topent.value) {
  						if(! x_parent.load(ent.id)) {
  							x_parent . fromSelectJSON ( ent );
  						}
  					}
				}
  			]|	
              
  time-mobl-mapper: x -> mapper
    where 	mapper := mobl-stat 
              |[
              	function timeStampMapper (json : JSON) : Num {
   		 			if (json.errors && json.errors.length > 0) {
      					log(json.errors);
    				} else {
      					return json.result;
    				}
  				}		 
  				]|
  
  void-mobl-mapper: x -> mapper
    where 	mapper := mobl-stat 
              |[
              	function voidMapper (json : JSON) : void {
   		 			if (json.errors && json.errors.length > 0) {
      					log(json.errors);
    				}
  				}		 
  				]|
  error-mobl-mapper: x -> mapper
    where 	mapper := mobl-stat 
              |[
              	function errorMapper (json : JSON) : JSON {
   		 			if (json.errors) {
      					return json.errors;
    				}
  				}		 
  				]|