module webservices-generation/mobl/unsynced-functions
imports 						   
	  	lib/mobl/MoBL
  		lib/mobl/editor-common.generated 
     
    	webservices-generation/mobl/model-to-mobl
    	webservices-generation/util
  	  	util 
	  	lib/editor-common.generated
rules 
	 
		
  generate-mobl-unsynced-functions: x -> x
	where  dirname := "webservices/mobl"
  			; <create-dir-in-workspace> dirname
  			; imports :=  mobl-def* 
  			  |[
  			  	import webservices::mobl::model
  			  	import webservices::mobl::sync
  			  	import mobl::ui::generic
  			  ]|  
  			; entities :=  <all-keys-EntDecl; filter(not(is-builtin-entity); where(entity-has-no-super)); string-sort> None()	// TODO flatten hirarchie
  			; nr-functions := <map(generate-mobl-unsynced-nrfunction)> entities
  			; elem-functions := <map(generate-mobl-unsynced-elemfunction)> entities
  			; sync-functions := <map(generate-mobl-sync-functions-unsynced)> entities  
  			; control := <generate-mobl-unsynced-overview-control> entities
  			; result := <concat; 
  			  	make-valid-page-from-mobl-defs(|dirname, "unsync")> [imports, nr-functions, elem-functions, sync-functions , [control]]
  			; module-to-moblfile(|dirname, "unsync")
  			; <refresh-workspace-file> $[[<project-path>]/[dirname]]   

rules // function generation
  
  generate-mobl-unsynced-nrfunction: entityname -> function
  	where	x_functionname := $[nrUnsynced[entityname]]
      		; x_functioncall := $[getUnsynced[entityname]]	
      		; function := mobl-def 
      		|[
      			function x_functionname() : Num {
      				return x_functioncall().count();
      			}
      		]|
      						  
   generate-mobl-unsynced-elemfunction: x_entityname -> function
  	where 	is-top-entity-by-dr
  			; x_functionname := $[getUnsynced[x_entityname]]
          	; t_entity := x_entityname  	
          	; function := mobl-def 
          	  |[
          	  	function x_functionname() : Collection<t_entity> {
          	  		return 	x_entityname.all().filter("version", "=", 0).filter("sync", "=", true);
          	  	}
          	  ]|			     
  
  generate-mobl-unsynced-elemfunction: x_entityname -> function
  	where not(is-top-entity-by-dr)
  	where	x_functionname := $[getUnsynced[x_entityname]]
          	; t_entity := x_entityname  	
          	; function := mobl-def 
          	  |[
          	  	function x_functionname() : Collection<t_entity> {
          	  		return 	x_entityname.all().filter("version", "=", 0);
          	  	}
          	  ]|			

rules// syncing
	
  generate-mobl-sync-functions-unsynced: entity -> function
 	where	x_functionname := $[syncUnsynced[entity]]
           	; x_functioncall := $[getUnsynced[entity]]
           	; x_servicecall := $[sync[entity]]  
           	; e_logstring := $["time needed for syncing unsynced [entity]: "]  
           	; function := mobl-def 
             |[
             	function x_functionname(){
             		var begin = now();
             		Sync.x_servicecall(x_functioncall().selectJSON(["id","version"]));
             		log(e_logstring + ((now() - begin) / 1000 ).toString());
             	}
             ]|     				  

rules// control 
	
  generate-mobl-unsynced-overview-control: entities -> control
  	where 	se_body* := <map(generate-mobl-unsynced-entity-label)>
		  	; control := mobl-def 
		  	  |[
		  	  	control statusUnsyncedEntities() {
		  	  		group {
		  	  			<h3>"Unsynced"</h3>
		  	  			se_body*
		  	  		}
		  	  	}
		  	  ]|	  
	 	  		
  generate-mobl-unsynced-entity-label: entityname -> label
   	where	e_entity := $["[entityname]: "]
			; x_functionname :=  $[nrUnsynced[entityname]] 		  
			; label := mobl-elem |[<p>label(e_entity + x_functionname())</p>]|		  
		 