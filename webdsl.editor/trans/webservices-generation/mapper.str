module webservices-generation/mapper
imports 
		entity-extraction/generate-entity-files
    	webservices-generation/util
  	  	util 
	  	lib/-
	  	webservices-generation/overlays
rules 
	
  generate-edit-mappers: project-path -> project-path
	where 	dirname := "webservices/mappers"
  			; <create-dir-in-workspace> dirname 
  			; entities := <all-keys-EntDecl> None()	 
  			; filteredEntities := <filter(not(is-builtin-entity))> entities
  			; entitywithproperties := <map(\x -> (x, <all-properties> x)\)> filteredEntities
   			; mappers := <map(generate-edit-mapper(|dirname))> entitywithproperties  
   			; <main-file-to-file(generate-main-model-file(|dirname, []) |dirname)> filteredEntities  
  			; <refresh-workspace-file> $[[project-path]/[dirname]]  
  
   			  
  mapper-to-file(|modulename): service -> service
  	where 	ast := <make-valid-page-from-defs(|modulename)>[service]
  			; write-ast-to-file(|$[[modulename].app])
  
  generate-edit-mapper(|dirname): t@(x_entityname, props) -> t
  	where   x_functionname := $[mapperEdited[x_entityname]]
  			; filteredprop := <filter(not(is-derived-prop-cons))> props
  			; stat_props* := <filter(json-to-properties-conversion-null-check)>filteredprop
  			; function := webdsl 
  				|[
  					function x_functionname(ent : x_entityname, json : JSONObject, localerrors : JSONArray) {
  						stat_props*
  					}		
  			 	]|
  			;  <mapper-to-file(|$[[dirname]/[x_entityname]])> function

rules //conversion to json
	
  json-to-properties-conversion-null-check: prop -> statement
    where	x_propname := <get-property-name> prop
    		; stat_mapping := <json-to-properties-conversion> prop
    		; x_stringPropname := String(x_propname)
    		; x_warningMessage := String($[Entity is missing property [x_propname]]) 
    		; statement := webdsl 
    		|[	if(!json.has(x_stringPropname)) {
    				localerrors.put(makeJSONErrorObject(x_warningMessage, "warning"));
    			} else {
    				if(json.get(x_stringPropname) == json.NULL) {
    					ent.x_propname := null;
    				} else {
    					stat_mapping
    				}
    			}
    		]|

  json-to-properties-conversion : prop -> statement
    where  	SimpleSort(type) := <get-property-type> prop
    		; <fetch(?type)> FromMoblStringTypes()
    		; x_propname := <get-property-name> prop
    		; x_stringPropname := String(x_propname)
    		; statement := webdsl |[ent.x_propname := json.getString(x_stringPropname);]|

  json-to-properties-conversion : prop -> statement
    where  	SimpleSort("Bool") := <get-property-type> prop
    		; x_propname := <get-property-name> prop
    		; x_stringPropname := String(x_propname)
    		; statement := webdsl |[ent.x_propname := json.getBoolean(x_stringPropname);]|    

  json-to-properties-conversion : prop -> statement
    where  	SimpleSort("Int") := <get-property-type> prop
    		; x_propname := <get-property-name> prop
    		; x_stringPropname := String(x_propname)
    		; statement := webdsl |[ent.x_propname := json.getInt(x_stringPropname);]|    
    	  	   		  
  json-to-properties-conversion : prop -> statement
    where  	SimpleSort("Long") := <get-property-type> prop
    		; x_propname := <get-property-name> prop
    		; x_stringPropname := String(x_propname)
    		; statement := webdsl |[ent.x_propname := json.getLong(x_stringPropname);]|    

  json-to-properties-conversion : prop -> statement
    where  	SimpleSort("Float") := <get-property-type> prop
    		; x_propname := <get-property-name> prop
    		; x_stringPropname := String(x_propname)
    		; statement := webdsl |[ent.x_propname := Double(json.getDouble(x_stringPropname)).floatValue();]| 
  
  json-to-properties-conversion : prop -> statement
    where  	SimpleSort(type) := <get-property-type> prop
    		; <fetch(?type)> MoblDateTimeTypes
    		; x_propname := <get-property-name> prop
    		; x_stringPropname := String(x_propname)
    		; statement := webdsl 
    		  |[
    		  	if(ent.x_propname == null ){
    		  		ent.x_propname := now();
    		  	}
    		  	ent.x_propname.setTime(json.getLong(x_stringPropname)* 1000L);
    		  ]|   
  
  json-to-properties-conversion : prop -> statement
    where  	t@SimpleSort(x_type) := <get-property-type> prop
    		; <is-entity-type> t  
    where not(<is-builtin-entity> x_type)		  
    where	x_propname := <get-property-name> prop
    		; x_stringPropname := String(x_propname)
    		; x_typename := String(x_type)  
    		; x_warningMessage := String($[Trying to set non existing object for property: [x_propname]]) 
    		; statement := webdsl 
    		  |[
    		  	var temp :=  json.getJSONObject(x_stringPropname);
  				var localent := loadEntity(x_typename, temp.getString("id").parseUUID()) as x_type;
  				if(localent != null) {
  					ent.x_propname := localent ;
  				} else {
  					localerrors.put(makeJSONErrorObject(x_warningMessage, "warning"));
  				}
    		  ]|
    		  
    json-to-properties-conversion : prop -> statement
    where  	t@GenericSort(genericsort, [SimpleSort(x_type)]) := <get-property-type> prop
    where not(<is-builtin-entity> x_type)		  
    where	x_propname := <get-property-name> prop
    		; if <?"List"> genericsort 
    		  	then e_collCreation :=  webdsl:e |[ List<x_type>()]|
    		  	else e_collCreation :=  webdsl:e |[ Set<x_type>()]|
    		  end
    		; x_stringPropname := String(x_propname)
    		; x_typename := String(x_type)  
    		; x_warningMessage := String($[Trying to add non existing object for property: [x_propname]])   
    		; statement := webdsl 
    		  |[	
    		  		var temp := json.getJSONArray(x_stringPropname);
    		  		var collection := e_collCreation;
				  	for( count : Int from 0 to temp.length()) {
				  		log(count);
				  		if(temp.get(count) != json.NULL) {
				  			var obj := temp.getJSONObject(count);
				  			var localent := loadEntity(x_typename, obj.getString("id").parseUUID()) as x_type;
				  			if(localent != null) {
				  				collection.add(localent);
				  			} else {
				  				localerrors.put(makeJSONErrorObject(x_warningMessage, "warning"));
				  			} 
				  		}
				  	}
				  	if(ent.x_propname != collection){
				  		ent.x_propname := collection; 
				  	}
    		  ]|          		  
 