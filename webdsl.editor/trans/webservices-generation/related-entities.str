module webservices-generation/related-entities

imports
	libstratego-lib
	
  	entity-extraction/generate-entity-files
	webservices-generation/interface
	webservices-generation/util
		
  	util
  	lib/-

rules //builder
	
  generate-related-entities-functions : project-path -> project-path
  	where	dirname := "webservices/related-entities"
  			; <create-dir-in-workspace> dirname 
  			; (topEntityType, topEntityProp) := <TopEntity>
  			; entities := <all-keys-EntDecl> None()	 
  			; filteredEntities := <filter(not(is-builtin-entity))> entities
  			; properties := <map(get-all-properties)> filteredEntities
  			; main-defs := <generate-main-defs-for-related-entities(|topEntityType)> filteredEntities 
  			; result:= <map(props-to-related-entities-functions(|dirname))> properties
  			; <main-file-to-file(generate-main-model-file(|dirname, main-defs )|dirname)> filteredEntities  
  			; <refresh-workspace-file> $[[project-path]/[dirname]]  

rules// lookup 
	
  get-all-properties: entityName -> (entityName, <all-properties-with-entity-anno> entityName)
  				  
rules//file generation 
	
  props-to-related-entities-functions(|dirname): t@(name,props) -> t
  	with	<file-exists> $[[<project-path>]/[dirname]]
  			; filename := $[[<project-path>]/[dirname]/[name].app]
	  		; <make-valid-page-with-extends-entity-for-related-functions(|$[[dirname]/[name]])
	  		   ; write-ast-to-file(|filename)> t  
	
  make-valid-page-with-extends-entity-for-related-functions(|dirname) : (x_entityName,props) ->
		ModuleDefs(dirname, def, [])
	where	ebd0* := [<build-related-entities-function>props]
	 	 	; def := def* 
	 		  	|[
	 		  		extend entity x_entityName {
	 		  			ebd0*
	 		  		}
	 		  	]|

rules//transformation
	
  build-related-entities-function: props -> function
	 where 	filterdProperties := <filter(not(is-simple-prop))> props  
	 		; stat_puts* := <filter(property-to-add)> filterdProperties
			; function := def 
			  |[ 
			  	function getRelatedEntities() : Set<Entity> {
			  		var set := Set<Entity>();
			  		stat_puts*
			  		return set;	  
			  	}
			  ]|
			  
  property-to-add: property -> statement
	where	(?Property(x_name, _, SimpleSort(_), _) 
	 			<+ ?PropertyNoAnno(x_name, _, SimpleSort(_)))
   			; statement := webdsl 
   			  	|[ 
   			  		if(this.x_name != null) {
   			  			set.add(this.x_name);
   			  		}
   			  	]| 
   			  	
  property-to-add: property -> statement
	where	(?Property(x_name, _, GenericSort(_, _), _) 
	 			<+ ?PropertyNoAnno(x_name, _, GenericSort(_, _)))
			; statement := webdsl	|[ 
   			  		if(this.x_name != null) {
   			  			set.addAll(this.x_name);
   			  		}
   			  	]|
rules // main file
  generate-main-defs-for-related-entities(|x_topEntity): entities -> defs
	where	def0 := <set-where-not-seen-function>
			; def1 := <generate-get-related-entities-function> entities
			; def2* := <map(generate-get-entities-for-topEntity(|x_topEntity))> entities
	  		; defs := def* 
			 |[
			 	def0
			  	def1
			  	def2*	
			  ]|
	  	
	generate-get-related-entities-function: entities -> function
		where 	stat_calls* := <map(generate-entity-to-related-entities-call)> entities
				; function := def
				|[	
					function getRelatedEntities(ent : Entity) : Set<Entity> {
						var type := ent.getTypeString();
						stat_calls*
						return Set<Entity>();
					}		
				]|  
				
	generate-entity-to-related-entities-call: x_entity -> statement
		where 	e_name :=	String(x_entity)
				; statement	:=  webdsl 
			  	|[
					if (type == e_name ){
						return (ent as x_entity).getRelatedEntities();
					}
				]|
				
	generate-get-entities-for-topEntity(|x_topEntity): x_entity -> function
		where not (<?x_topEntity> x_entity )
		where 	e_name :=	String(x_entity)
				; e_name2 := String(x_topEntity)
				; x_functioname := $[getAll[x_entity]For[x_topEntity]]  
				; function := def
				|[
					function x_functioname (tl :x_topEntity) : Set<x_entity> {
						var todo := Set<Entity>();
						var seen := Set<UUID>();
						var found := Set<x_entity>();
						todo.addAll(getSetWhereNotSeen(todo, seen, tl.getRelatedEntities()));
						while( todo.length > 0 ) {
	  	 					var newTodo := Set<Entity>();
							for(ent: Entity in todo where ent != null) {
								var type := ent.getTypeString();
								var isToplevel := (type == e_name2);
								if(!isToplevel) {
									if (type == e_name) {
										found.add(ent as x_entity); 
									}
									newTodo.addAll(getSetWhereNotSeen(todo, seen, getRelatedEntities(ent)));
								}
							}
							todo := newTodo ;
						}
						return found;
					}  	
				]| 

	generate-get-entities-for-topEntity(|x_topEntity): x_entity -> function
		where 	<?x_topEntity> x_entity 
				; x_functioname := $[getAll[x_entity]For[x_topEntity]]  
				; function := def
				|[
					function x_functioname (tl : x_topEntity) : Set<x_entity> {
						return {tl};
					}
				]| 


	set-where-not-seen-function = !def 
		|[	function getSetWhereNotSeen(set : Set<Entity>, seen : Set<UUID>, add : Set<Entity> ) : Set<Entity>{
				var newset := Set<Entity>();
				for(ent : Entity in add ) {
					var inSeen := ent.id in seen;
					if(!inSeen) {
						newset.add(ent);
						seen.add(ent.id);	
					}
				}
				return newset;
			}
		]|
		 		
						 			  	