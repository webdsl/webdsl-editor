module webservices-generation/sync-services
imports 
    	webservices-generation/interface
    	webservices-generation/util
  	  	util 
	  	lib/-
rules 
	
  generate-sync-services(|topLevelEntity): x -> x
	where 	entities := <all-keys-EntDecl> None()	  
  			; filteredEntities := <filter(not(is-builtin-entity))> entities 
  			; <map(generate-sync-service(|topLevelEntity))> filteredEntities
   			  
   			  
  generate-sync-service(|x_topLevelEntity): x_entityname -> x_entityname
  	where 	name := $[sync[x_entityname]]
  			; str0 :=  x_topLevelEntity
  			; stat_forloop :=  <generate-sync-for-entity-loop(|x_topLevelEntity, x_entityname)>x_entityname
  			; stat_childloop* := <get-subclasses-of-entity; map(generate-sync-for-entity-loop(|x_topLevelEntity, x_entityname))>  x_entityname 	
      		; body := webdsl 
	      	  |[
	      	  	var request := JSONArray(readRequestBody()) ;
	  			var result := JSONArray() ;
	  			var tls := Set<x_topLevelEntity>();
	  			for ( count : Int from 0 to request.length() ){
	  				var entity := ( loadEntity(str0, request.getJSONObject(count).getString("id").parseUUID()) as x_topLevelEntity ) ;
	  				tls.add(entity);
	  			}
				stat_forloop
				stat_childloop*
	  		  ]|   			 
	       	; service := <generate-service(|name)> body
	        ; service-to-file(|name) 
	          
  generate-sync-for-entity-loop(|toplevelEntity, x_superClass): entity  -> statement
  	where 	x_functionname := $[getAll[entity]For[toplevelEntity]]  	
  			; statement :=  webdsl 
	      	  |[
	      	  	for(ent: x_superClass in x_functionname(tls) ){
	  				result.put(ent.toJSON());
	  			}
	      	  ]|