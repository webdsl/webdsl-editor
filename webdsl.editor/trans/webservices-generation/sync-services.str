module webservices-generation/sync-services
imports 
    	webservices-generation/interface
  	  	util 
	  	lib/-
rules 
	
  generate-sync-services: x -> x
	where 	entities := <all-keys-EntDecl> None()	  
  			; filteredEntities := <filter(not(is-builtin-entity))> entities
  			; <map(generate-sync-service)> filteredEntities
   
	
  generate-sync-service: x_entityname -> x_entityname
  	where 	name := $[sync[x_entityname]]
  			; x_namestring :=  $["[x_entityname]"]
  			; stat_forcountbody := webdsl 
      	  	  |[ 	
      	  	  	var entity := ( loadEntity(x_namestring, request.getJSONObject(count).getString("id").parseUUID()) as x_entityname ) ;
      			if ( entity.version > request.getJSONObject(count).getString("version").parseInt() ){
        			result.put(entity.toJSON());
        		} else {
      				result.put(entity.toMinimalJSON());
      			}
      		  ]|
      	  	  	
  		
//optimasation 1  				
  			// forcountbody :=  Block([ Stat( Call( Var("result"), "put", [ Call(
     //                		Cast( 
     //                			ThisCall( "loadEntity", [ String(entityname), 
     //                			Call(
     //                				Call(
	    //                 				Call(Var("request"), "getJSONObject", [Var("count")])
	    //                 				, "getString"
	    //                         		, [String("id")])
	    //                         	, "parseUUID", [])])
     //                			, SimpleSort(entityname))
     //              			, "toJSON", [])]))])
  			
      	; body := webdsl 
      	  |[
      	  	var request := JSONArray(readRequestBody()) ;
  			var result := JSONArray() ;
  			for ( count : Int from 0 to request.length() ){
  				stat_forcountbody
  			}
  		  ]| 
  			 
            ; service := <generate-service(|name)> body
        	; service-to-file(|name) 