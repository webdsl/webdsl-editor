module webservices-generation/authentication

imports
	webservices-generation/util	
	webservices-generation/interface
		 
  	util 
  	lib/editor-common.generated 
  	libwebdsl-generator
  	libwebdsl-front

rules
	generate-authentication-webservice-module: x -> x
		where 	principal := <PrincipalDecl> 
				; generate_webservices_authenticate_device
				; principalent := <?AccessControlPrincipal(<!SimpleSort(<id>)>,_)> principal
				; defs := <general-defs-for-authentication-webservices-entity> principalent
				; result := <make-valid-page-from-defs(|$[webservices/authentication])> defs
				; <write-ast-to-file(|$[webservices/authentication.app])> result  
	
	generate_webservices_authenticate_device: x -> x
	  	where 	name := $[getDeviceKey]
      		; body := webdsl 
	      	  |[
	      	  	  var request := JSONObject(readRequestBody()) ;
				  var result := JSONObject();
				  if(json.has("username") && json.get("username") != json.NULL) {
				 		if(json.has("pw") && json.get("pw") != json.NULL) {
				 			if(json.has("devicename") && json.get("devicename") != json.NULL) {
				 				var succes := authenticate(json.getString("username"), json.getString("pw") as Secret);  
				 				if (succes) {
				 					result.put("key", securityContext.principal.generateAuthenticationKey(json.getString("devicename")));
				 				} else {
				 					errors.put("no valid combination");
				 				}
				 			} else {
				 				errors.put("missing device name");
				 			}
				 		} else {
				 			errors.put("missing pw");
				 		}
				  } else {
				  	errors.put("missing username");
				  }
	  		  ]|   			 
	       	; service := <generate-service(|name)> body
	        ; service-to-file(|name) 
	
	
	general-defs-for-authentication-webservices-entity: (x_entityname) -> defs
		where 	defs := def* |[
					extend entity x_entityname {
					 	deviceKeySet  -> Set<AuthenticationKey>
					 	
					 	function generateAuthenticationKey(deviceDescription : String) : UUID {
					 		var key := getDeviceKey(deviceDescription);
					 		if(key == null){
					 			var newKey := AuthenticationKey {
					 				deviceDescription := deviceDescription	
					 			};
					 			newKey.save();
					 			deviceKeySet.add(newKey);
					 			key := newKey.id;
					 		}
					 		return key;	
					 	}
					 	
					 	function getDeviceKey(deviceDescription : String) : UUID {
					 		var filteredList := [key | key : AuthenticationKey in deviceKeySet where  deviceDescription == key.deviceDescription ];
					 		if(filteredList.length == 1) {
					 			return filteredList[0].id;	
					 		} else {
					 			return null;
					 		}
					 		
					 	}
					 	
					}
					
					entity AuthenticationKey {
						deviceDescription 	:: String 
					}
				]|
	
	