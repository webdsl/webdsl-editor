module webservices-generation/authentication

imports
	webservices-generation/util	
	webservices-generation/interface
	
	webservices-generation/mobl/authentication
		 
  	util 
  	lib/editor-common.generated 
  	libwebdsl-generator
  	libwebdsl-front

rules
  generate-authentication-webservice-module: x -> x
	where principal := <PrincipalDecl> 
	with generate_webservices_authenticate_device
		; generate-mobl-authenication-module
		; <?AccessControlPrincipal(principalent,[usernameprop|_])> principal
		; <generate_webservices_authenticate_device_by_key> (principalent, usernameprop)
		; generate_webservices_deauthenticate  
		; defs := <general-defs-for-authentication-webservices-entity> principalent
		; result := <make-valid-page-from-defs(|$[webservices/authentication])> defs
		; <write-ast-to-file(|$[webservices/authentication.app])> result  
	
  generate_webservices_authenticate_device: x -> x 
	with name := $[getDeviceKey]
      	; body := webdsl 
			|[
	      		var request := JSONObject(readRequestBody()) ;
				var result := "";
				if(json.has("username") && json.get("username") != json.NULL) {
				 	if(json.has("pw") && json.get("pw") != json.NULL) {
				 		if(json.has("devicename") && json.get("devicename") != json.NULL) {
				 			var succes := authenticate(json.getString("username"), json.getString("pw") as Secret);  
				 			if (succes) {
				 				result := securityContext.principal.generateAuthenticationKey(json.getString("devicename")).toString();
				 			} else {
				 				errors.put("no valid combination");
				 			}
				 		} else {
				 			errors.put("missing device name");
				 		}
				 	} else {
				 		errors.put("missing pw");
				 	}
				} else {
					errors.put("missing username");
				}
	  		]|   			 
		; service := <generate-service(|name)> body
		; service-to-file(|name) 


  generate_webservices_authenticate_device_by_key: (entity,usernameprop) -> None()
	with name := $[authenticate]
	  	; x_findfun := <concat-strings> ["find", entity, "By", <capitalize-string> usernameprop]
      	; body := webdsl 
			|[
				var request := JSONObject(readRequestBody()) ;
				var result := false ;
				if ( json.has("username") && json.get("username") != json.NULL) {
					if ( json.has("devicekey") && json.get("devicekey") != json.NULL ) {
						if ( json.has("devicename") && json.get("devicename") != json.NULL) {
				       		var principlelist := x_findfun(json.getString("username"));
				       		if(principlelist.length > 1) {
				        		var user := principlelist[0];
				        		var key := user.getDeviceKey(json.getString("devicename"));
				        		if(key != null) {
				        			var devicekey := json.getString("devicekey").parseUUID();
				        			if(devicekey != null && devicekey == key.id){
				        				securityContext.principal := user;
				        				result := true;
				        			} else {
				        				errors.put("invalid device key");
				        			}
				        		} else {
				        			errors.put("invalid device name");
				        		}
				       		} else {
				        		errors.put("unknown user");
							}
				      	} else {
				        	errors.put("missing device name");
				      	}
				    } else {
				    	errors.put("missing device key");
				    }
				} else {
				    errors.put("missing username");
				}
			]|   			 
		; service := <generate-service(|name)> body
		; service-to-file(|name) 	          


  generate_webservices_deauthenticate: x -> None()
  	with name := $[logout]
      	; body := webdsl 
	    	|[
	      		var request := JSONObject(readRequestBody()) ;
				var result := true;
				securityContext.principal := null;
	  		]|   			 
		; service := <generate-service(|name)> body
		; service-to-file(|name) 	  
	
	
  general-defs-for-authentication-webservices-entity: (x_entityname) -> defs
	with defs := def* 
			|[
				extend entity x_entityname {
					deviceKeySet  -> Set<AuthenticationKey>
					 	
					function generateAuthenticationKey(deviceDescription : String) : UUID {
						var key := getDeviceKey(deviceDescription).id;
					 	if(key == null) {
					 		var newKey := AuthenticationKey {
					 			deviceDescription := deviceDescription	
					 		};
					 		newKey.save();
					 		deviceKeySet.add(newKey);
					 		key := newKey.id;
					 	}
					 	return key;	
					}
					 	
					function getDeviceKey(deviceDescription : String) : AuthenticationKey {
					 	var filteredList := [key | key : AuthenticationKey in deviceKeySet where  deviceDescription == key.deviceDescription ];
					 	if(filteredList.length == 1) {
					 		return filteredList[0];	
					 	} else {
					 		return null;
					 	}		
					} 	
				}
					
				entity AuthenticationKey {
					deviceDescription :: String 
				}
			]|