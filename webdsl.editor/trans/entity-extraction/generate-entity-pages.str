module entity-extraction/generate-entity-pages

imports
	fact-extraction/datalog
	libstratego-lib
	libstratego-sglr
	libwebdsl-generator
  	libwebdsl-front
  	util
  	lib/-
  	entity-extraction/generate-entity-files
  	
rules //builder 
	
  generate-entity-pages: (selected, position, ast@Application(_, _), path, project-path) -> None()
  	with	<webdsl-editor-init> (path, project-path, ast) //cleanup DR, set appname DR
        	; <full-app-load(|<dirname> path)> ast //not using editor-analyze like other analysis tasks
  	where	dirname := "entity-pages"
  			; <create-dir-in-workspace> dirname 
  			; entities := <all-keys-EntDecl> None()	 
  			; filteredEntities := <filter(not(is-builtin-entity))> entities
  			; completeEntities := <map(EntDecl; complete-entity-with-extends-properties)> filteredEntities  
  			; cleanedEntities := <map(try(remove-general-super-from-entity))> completeEntities
  			; <map(entity-to-page(|dirname))> cleanedEntities
  			; <main-file-to-file(generate-main-page-file(|dirname)|dirname)> filteredEntities  
  			; <refresh-workspace-file> $[[project-path]/[dirname]]  

  generate-entity-pages: (selected, position, ast, path, project-path) -> "This builder is only supported on the application file" 	
	where not (<?Application(_, _)> ast)
	where fatal-err-msg(|"This builder is only supported on the application file")
	
rules //page stuf  		
		
   entity-to-page(|dirname): e -> e
  	with 	(? Entity(name, _, _) 
     			<+ ?EntityNoSuper(name,_))	
     		; <file-exists> $[[<project-path>]/[dirname]]
  			; filename := $[[<project-path>]/[dirname]/[name].app]
	  		; <make-entity-page(|$[[dirname]/[name]])
	  		   ; write-ast-to-file(|filename)> e
	
	make-entity-page(|modulename) : e -> result
	 with  	((<?EntityNoSuper(name, props)> e 
	 			; elem_header* := $["[name]"] )
	 		<+ (<?Entity(name, super, props)> e 
	 			; linksuper := <enityname-to-pagelink> super
	 			; elem_header* := [String($[[name] :[" "]]), linksuper] ) )
	 		; elem_properties* := <filter(property-to-par)> props
	 		; elem_functions* := <filter(function-to-par)> props
	 		; x_pagename := $[showEntity[name]]
	 		; elem0 := Text(name) 
	 		; body := def*
	 		  	|[ 
	 		  		page x_pagename () {
	 		  	 		title  { elem0 } 
	 		  	 		header { elem_header* }
	 		  	 		group("Properties") {
	 		  	 			elem_properties*
	 		  	 		}
	 		  	 		group("Functions") {
	 		  	 			elem_functions*
	 		  	 		} 
	 		  	 	}
	 		  	]|  
	 		; result := ModuleDefs(modulename, body, [] )	
	
		
	property-to-par: x -> par
     where	<is-property-cons> x
     		; sigProp := <try(remove-derive-from-property)> x
     		; cleanProp := <try(remove-Anno-from-property)> sigProp
     		; elem_properties* := <property-to-webdsl-ast-string-represatation> cleanProp
			; par := call|[par {elem_properties* }]| 
	
	function-to-par: x -> par
     where	<is-function-cons> x
     		; sigFun := <remove-body-from-function> x
     		; elem_functions* := <function-to-webdsl-ast-string-represatation> sigFun
			; par := call|[par { elem_functions* }]| 
	
	pagelink-to-par: elem_call@NavigateCall(t1, t2, t3) ->	call|[par { elem_call }]| 
	
rules //main page
	
 generate-main-page-file(|dirname): entitynames -> mainAST
   where 	 <generate-main-model-file(|dirname, []); ?ModuleDefs(_, def* , _)> entitynames
   			; sortednames := <string-sort> entitynames
   			; elem_entities* := <map(enityname-to-pagelink; pagelink-to-par)> sortednames
   			; body := def*
	 		  	|[ 
	 		  		def*
	 		  		page showEntities () {
	 		  	 		title  { "Entities" }  
	 		  	 		group("Entities") {
	 		  	 			elem_entities*
	 		  	 		}
	 		  	 	}
	 		  	]|   
   			; mainAST := ModuleDefs($[[dirname]/main], body, [] )	  

rules //converting
		
	remove-derive-from-property: DerivedProperty(t1, t2, t3, t4, t5) -> Property(t1, t2, t3, t4)
	
	remove-derive-from-property: DerivedPropertyNoAnno(t1, t2, t3, t4) -> PropertyNoAnno(t1, t2, t3)
	
	remove-Anno-from-property: Property(t1, t2, t3, t4) -> PropertyNoAnno(t1, t2, t3) 	
	
	remove-body-from-function: Function(t1, t2, t3, t4) -> Function(t1, t2, t3,None())
  
rules//custom way to pp  
		
	function-to-webdsl-ast-string-represatation: Function(t1, t2, t3, t4) -> result
	 where 	begin := String($[function [t1] ( ])
	 		; params := <map(arg-to-webdsl-ast-string-represatation)> t2
	 		; paramsSeperated := <separate-by(|String(", ")) ; flatten-list> params
			; inbetween := String(" ) : ")	
			; type := <sort-to-navigate <+ sort-to-text> t3
			; result := <flatten-list> [begin, paramsSeperated, inbetween, type]  
	
	arg-to-webdsl-ast-string-represatation: Arg(name, type) -> result
	 where 	begin := String($[[name] :[" "]])
			; typestring := <sort-to-navigate <+ sort-to-text> type
			;  result := [begin, typestring]  
	
	property-to-webdsl-ast-string-represatation: PropertyNoAnno(name, sort, type) -> result
	 where 	begin := String(name) 
	 		; middle := String(<pp-webdsl-to-string> sort)  
	 		; typestring := <sort-to-navigate <+ sort-to-text> type
	 		; result := <flatten-list> [begin, String(" "), middle, String(" "), typestring]
	
	sort-to-navigate: SimpleSort(t) -> <enityname-to-pagelink> t 
	 where  <IsEntity> t
	 where not (<is-builtin-entity> t)   
	
	sort-to-navigate: GenericSort(name, type) -> result
	 where 	param := <Hd; sort-to-navigate> type
		 	; result := [String($[[name]<]), param, String(">")]
	
	sort-to-text: x -> String(<pp-webdsl-to-string> x) 
	
	enityname-to-pagelink: name ->  elem|[navigate(x_pagename()){elem0}]|
	 where 	<is-string> name
	 		; x_pagename := $[showEntity[name]]
	 		; elem0 := Text(name)