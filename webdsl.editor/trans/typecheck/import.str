module typecheck/import

imports 
  libwebdsl-front
  libwebdsl-generator
  lib/editor-common.generated
  caching
  util
  typecheck/-
  application-ini
  webdsl_editor

rules
  
  declaration-of: Imports(x) -> <ModuleDecl> x
  
  // Special declare case for modules 
  declare-global =
      ?Module(name,_)
    ; strip-mod => stripped-mod
    ; store-def
    ; store-def-to-mod-desugar
    ; rules(ModuleDecl : name -> stripped-mod)
    ; fail // to continue traversal

  // When resolving an import, the destination file is parsed but not desugared
  // Constructor will be desugared by hover-1 
  desugar-def = simplify-module-constructor
  desugar-def = simplify-application-constructor

rules  

  fix-module-name(|fullpath): Module(modname, sections) -> Module(newname, sections)
    with  base := <concat-strings> [<ApplicationIniDir <+ prim("SSL_EXT_projectpath")>, "/"]
    where (l,r) := <split-after> (fullpath, base)
        ; not(<eq> (r, "")) // base not found
        ; newname := <split-before; Fst> (r, ".app")
        ; not(<eq> (newname, modname))  // only succeed if actually renamed
        ; <concat-strings; debug> ["Renaming module '",modname,"' to '",newname,"'."]

rules

  find-extra-errors: mod@Module(name, _) -> <fail>
    with  fullpath := <FullPath>
    where Module(newname, _) := <fix-module-name(|fullpath)> mod
        ; msg := (mod, <concat-strings> ["Module name does not match file name; should be '", newname, "'"])
        ; rules(ExtraWarnings :+= msg)
