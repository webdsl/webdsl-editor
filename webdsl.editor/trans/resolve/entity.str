module resolve/entity

imports
   libwebdsl-front
   libwebdsl-generator
   resolve/-
   util

rules // helpers
  
  editor-resolve: a@(node, position, ast, path, project-path) -> decl
    where ent := <in-entity> a
        ; {| NodeInEntity:
                rules(NodeInEntity := ent)
              ; debug(!"Resolve in entity: ")
              ; decl := <debug(!".. node is : "); declaration-in-entity(|ent); debug(!".. resolved: ")> node
          |}

   // get the name of the entity in which the selected node is located
  in-entity =
      ?(node, position, ast, path, project-path)
    ; <walk-ast(?Entity(<id>,_,_) <+ ?ExtendEntity(<id>,_) | position)> ast

rules // lookup
    
	find-property(|x_class) = 
      traverse-hierarchy(find-property' | x_class)
  	; not(get-anno(?IsGeneratedProperty()))
  	; has-ast-mapping
  find-property': (x_class, propname) -> decl
    where decl := <debug(!"Trying: ");PropertyDecl; debug(!"Got: "); add-anno(|FromEntity(x_class))> (x_class, propname)
  
rules // resolve
    
  // Explicit field access (x.y, this.x)
  declaration-of: f@FieldAccess(var, prop) -> decl
    where SimpleSort(ent) := <type-of; debug> var
        ; decl := <find-property(|ent)> prop
        ; anno := <get-anno(?FromEntity(_))> decl
        ; <set-hover-info> anno
 
  // Non-renamed field access (derived property with expression containing 'this')
  declaration-in-entity(|ent): FieldAccess(Var("this"){}, prop) -> decl
    where decl := <find-property(|ent)> prop
        ; anno := <get-anno(?FromEntity(_))> decl
        ; <set-hover-info> anno
 
  // Implicit field access 
  declaration-in-entity(|ent): Var(x) -> decl
    where decl := <find-property(|ent)> (<strip-annos> x)
        ; <set-hover-info> FromEntity(ent)

  // "this"
  declaration-in-entity(|ent): Var("this") -> decl
    where decl := <EntDecl> ent
  
  // inverse anno
  declaration-of: InverseAnno(ent, prop) -> decl
    where decl := <find-property(|ent)> prop
        ; <set-hover-info> FromEntity(ent)

  // Extend entity to entity
  declaration-of: ExtendEntity(name, _) -> <EntDecl> name

rules // hover
  
  // property access
  hover-with-info: (Property(propname, type, srt, anno*), FromEntity(ent)) -> text
    where text := <concat-strings> ["Property ", propname, " : ", <pp-type> srt, "<br/>from entity ",ent]
 
  // property declaration
  hover: Property(propname,type,srt,anno) -> text
    where text := <concat-strings> ["Property ", propname, " : ", <pp-type> srt]
 
  
rules // utils
	
  traverse-hierarchy(s | x_class) =
    <s> (x_class, <id>) <+ <s> (<Extends> x_class, <id>)
     