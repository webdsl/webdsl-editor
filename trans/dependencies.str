module dependencies

imports
  libwebdsl-front
  application-ini
  webdsl_editor
  dr
    
strategies  
  
  dependencies-file = !$[[<ApplicationIniDir>]/.dependencies.webdsl]
  
  update-dependency-graph =
      dependencies-file; (file-exists; ReadFromFile <+ ![])
    ; filter(read-old-dependencies)   // stores old deps in DR's
    ; all-keys-RulesUsedBy
    ; map(\fullpath -> (fullpath, <RulesUsedBy> fullpath)\)
    ; <WriteToBinaryFile> (<dependencies-file>, <id>)
      
  read-old-dependencies: (fullpath, mods) -> (fullpath, mods)
    where not(<RulesUsedBy> fullpath)   // not updated in this analyze run
        ; rules(RulesUsedBy : fullpath -> mods)
        //; !fullpath; debug(!".. using old dependencies for: ")
  
	find-dependent-modules =
      FullPath => current
    ; changed := <create-change-set> (<RulesCreated>, <RulesCreatedPrev>)
    ; all-keys-RulesUsedBy; remove-dr-dummies    // all modules
    ; filter(not(?current); has-rule-use(|changed))
    
  has-rule-use(|ruleset): mod -> mod
    with  uses := <RulesUsedBy> mod
        ; common := <isect> (ruleset, uses) 
    where not([] := common)
        ; !mod; debug(!".. have to re-analyze mod: ")
        ; !common; debug(!".. common rules: ")
  
  remove-dr-dummies = map(remove-dr-dummy)
  
  create-change-set: (new, old) -> all-changes
    with   {| NewRule, OldRule: 
              <rules-as-key-val-pairs(\(key,val) -> <rules(NewRule :+ key -> val)>\)> new
            ; <rules-as-key-val-pairs(\(key,val) -> <rules(OldRule :+ key -> val)>\)> old
              // changed rules
            ; all-keys-NewRule; remove-dr-dummies
            ; filter(where(<not(eq)> (<bagof-NewRule>, <bagof-OldRule>)))
            ; ?changed
            //; try(?[]; debug(!"Rules changed: "))
              // new rules
            ; all-keys-NewRule; remove-dr-dummies
            ; filter(where(not(OldRule)))
            ; ?added
            //; try(not(?[]); debug(!"Rules added: "))
              // removed rules
            ; all-keys-OldRule; remove-dr-dummies
            ; filter(where(not(NewRule)))
            ; ?removed
            //; try(not(?[]); debug(!"Rules removed: "))
           |}
        ; all-changes := <concat;uniq> [changed, added, removed]
        //; debug(!"All changes: ")
  
  rules-as-key-val-pairs(s) =
      mapconcat(\(name, keyvals) -> <mapconcat(\(key,vals) -> <map(\val -> <s> ((name,key),val)\)> vals \)> keyvals \)
   
  rules-to-keys =
      mapconcat(\(name,keyvals) -> <map(\(key,vals) -> (name,key)\)> keyvals\)
  