module webdsl

imports
  libstratego-lib
  //libstratego-sglr
  //libwebdsl-generator
  libwebdsl-front
  entities
  types
  parse
  properties
  application-ini
  template
  enum
  function
  util
  caching
  resolve
 
signature constructors
  FILE : Term -> Term

strategies // editor service interface

  main-webdsl =
     fatal-err(|"Not designed to be invoked directly")
  
  editor-analyze:
    (ast, path, fullpath) -> (errors, warnings, notes)
    with
      where(!""; debug);
      // Do not lose the cached definitions
      where(
          rulesets := <map(save-rule-set)> ["ModuleDefs", "ModuleCacheTimestamp"]
        ; try(dr-scope-all-end); dr-scope-all-start
        ; <map(restore-rule-set)> rulesets
      )
    //; init-compiler-builtins
      // Start with declaring the current file. If there are double definitions,
      // the imports will override our declarations and the error will be shown in this file.
    ; ast2 := <dbg-time(desugar-declare | "desugar-declare")> ast
    ; <dbg-time(get-all-imports | "get imports")> (ast, path)
   
    with
      errors   := <collect-markers(check)> ast2
    ; warnings := <collect-markers(constraint-warning)> ast2
    ; notes    := <collect-markers(constraint-note)> ast2
     
  desugar-declare =
    desugar-all
  ; alltd(declare-def)
  
  desugar-all = innermost(desugar-def)
  
  get-all-imports: (ast, path) -> <id>
    with  <set-appname> FILE(<get-main-file-name>) // need to set DirName DR
        ; appname := <AppName>
        ; mainapp := <concat-strings> [<ApplicationIniDir>, "/", appname, ".app"]
        ; fullpath := <concat-strings> [<prim("SSL_EXT_projectpath")>, "/", path]
        ; rules(IsImported : fullpath) // do not reload the current file if its transitively imported
        ; {| ParsingModule:
              rules(ParsingModule := fullpath)
              // try to import main file if needed
            ; where(!appname; debug(!"Main app name: "))
              // TODO: does this work on windows too ? (/ vs. \)
            ; if not(fullpath := mainapp); <file-exists> mainapp then
                  where(!appname; debug(!"Explicitely importing main file: ")) 
                ; <get-imports> Imports(appname)
	            end
	        ; <alltd(get-imports)> ast
	      |}
 
  get-imports : 
    imp@Imports(x) -> imp
    where <editor-parse-webdsl-module> (<concat-strings> [x,".app"])
          
rules

  init-compiler-builtins =
    not(built-in-template-rule-setup
        ; fatal-err-msg(|"error in typechecker.str, failure should not occur here, make sure built-in-template-setup rules end with ';fail'")
        ) // setup dyn rules for checks
  ; not(after-tc-declare-hook
        ; fatal-err-msg(|"error in typechecker.str, failure should not occur here, make sure after-tc-declare-hook rules end with ';fail'")
        ) // setup dyn rules for checks
  