module webdsl

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/WebDSL

/**
 * Main editor interface
 * (defined by the WebDSL-Builders/-References.esv files)
 */
rules
  
  /**
   * Analyzes the current program.
   * Returns a tuple with errors, warnings, and notes;
   * each a list of (term, message) tuples or simply (message) terms.
   */
  editor-analyze:
    (ast, path, project-path) -> (errors, warnings, notes)
    with
      // Ensure all dynamic rules are properly scoped
      try(dr-scope-all-end);
      dr-scope-all-start;
      // Analysis: record all entity declarations
      alltd(record-entity)
    with
      // Collect all feedback markers
      errors   := <collect-all(constraint-error, conc)> ast;
      warnings := <collect-all(constraint-warning, conc)> ast;
      notes    := <collect-all(constraint-note, conc)> ast

  /**
   * Records the definition of an entity in a dynamic rule GetEntity.
   */
  record-entity:
    Entity(x, body) -> Entity(x, body)
    with
      rules(
        GetEntity :+ x -> x
      )
  
  /**
   * Resolves a reference when the user control-clicks or presses F3 in the editor.
   * For the entities language, we only resolve references for Type(_) nodes.
   */
  editor-resolve:
    (Type(type), position, ast, path, project-path) -> target
    where
      // This rule only successfully evaluates if it can 
      // lookup the entity for this type, as recorded in record-entity.
      target := <GetEntity> type

  /**
   * Returns "hover help" information for a particular node in the editor.
   * For references, this rule is invoked using the resolved term.
   */
  editor-hover:
    (target, position, ast, path, project-path) -> <conc-strings> ("Hover help: ", <write-to-string> target)
  
  /**
   * Transforms a selection to Java.
   */
  generate-java:
    (selected, position, ast, path, project-path) -> ("filename", "result-string")
    with
      fatal-err(|"Not implemented")
  
  /**
   * Prints the abstract syntax ATerm of a selection.
   */
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result-string)
    with
      filename      := <guarantee-extension(|"aterm")> path;
      result-string := <pp-aterm-box; box2text-string(|120)> selected

/**
 * Semantic rules
 */
rules
    
  /**
   * Reports an error if a property type is undefined.
   * This error is reported on the type name.
   */
  constraint-error:
    Property(x, Type(type)) -> (type, ["Type ", type, " is not defined"])
    where
      not(!type => "String"); // String and Int are built-in types
      not(!type => "Int");
      not(<GetEntity> type) // no entity for this type
  
  /**
   * Reports an error if an entity is defined more than once.
   * This constraint is implemented by testing if the "bag" of
   * all entities x is not a singleton list.
   * This error is reported on the entity name x.
   */
  constraint-error:
    Entity(x, _) -> (x, "Duplicate entity name")
    where
      not(<bagof-GetEntity> x => [_])
  
  /**
   * Reports a warning if an entity name does not start with a capital.
   * This error is reported on the entity name x.
   */
  constraint-warning:
    Entity(x, _) -> (x, "Entity names must start with a capital")
    where
      not(<explode-string; Hd; is-upper> x)
  
  /**
   * Adds a note to modules named "example."
   */
  constraint-note:
    Module(x, _) -> (x, ["This is just an example program in the \"entities\" language,",
                         " (this note is defined in trans/webdsl.str) ])"])
    where
      !x => "example"

signature constructors

  // HACK: Below are copies of the signatures of the terms used in this file.
  // These definitions are actually automatically generated in the imported
  // include/WebDSL.str module. However, to ensure that this example
  // file doesn't break if the syntax is changed, we also include them here.
  // Consider this a newbie treat; now that you got this far reading through
  // this file, just try removing them and see if the build still works! ;)
  
  Module   : ID * List(Entity)   -> Module
  Entity   : ID * List(Property) -> Entity
  Property : ID * Type           -> Property
  Type     : ID                  -> Type
