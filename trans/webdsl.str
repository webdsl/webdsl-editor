module webdsl

imports
  libstratego-lib
  //libstratego-sglr
  libwebdsl-generator
  libwebdsl-front
  parse
  application-ini
  util
  caching
  typechecker
  resolve
  
signature constructors
  FILE : Term -> Term
  
/*

TODO:
  - some constraint trigger only on Application(...) and not on Module(...)
      (like global var must be initialized)

*/

strategies // editor service interface

  main-webdsl =
     fatal-err(|"Not designed to be invoked directly")
  
  editor-analyze:
    (ast, path, fullpath) -> (errors, warnings, notes)
    with
      where(!""; debug);
      // Do not lose the cached definitions
      where(
          rulesets := <map(save-rule-set)> ["ModuleDefs", "ModuleDefsTc", "ModuleCacheTimestamp"]
        ; try(dr-scope-all-end); dr-scope-all-start
        ; <map(restore-rule-set)> rulesets
      )
    //; init-compiler-builtins
      // Start with declaring the current file. If there are double definitions,
      // the imports will override our declarations and the error will be shown in this file.
    //; ast2 := <dbg-time(desugar-declare | "desugar-declare")> ast
    ; <dbg-time(get-all-imports | "get imports")> (ast, path)
    ; ast2 := <try(desugar-compat)> ast
    ; (errors-ast, warnings, ast3) := <dbg-time(typecheck-editor-new | "typecheck")> ast2
    ; rules(DecoratedAst := ast3)
    ; <dbg-time(desugar-declare | "resolving")> ast    // declare for resolving
    ; notes := []
    ; errors := <concat> [errors-ast, <bagof-ImportErrors>]
    ; print-total-log-time
        
  /*
    with
      errors   := <collect-markers(check)> ast2
    ; warnings := <collect-markers(constraint-warning)> ast2
    ; notes    := <collect-markers(constraint-note)> ast2
  */
  
  desugar-declare =
    desugar-all
  ; preserve(alltd(strip-bodies))
  ; alltd(declare-def)
  
  desugar-all = preserve(innermost(desugar-def))
  
  import-main-file: fullpath -> fullpath
    where mainfilename := <get-main-file-name>
    with  <set-appname> FILE(mainfilename) // need to set DirName DR
        ; appname := <AppName>
        ; mainapp := <concat-strings> [<ApplicationIniDir>, "/", appname, ".app"]
          // TODO: does this work on windows too ? (/ vs. \)
        ; if not(fullpath := mainapp); <file-exists> mainapp then
              where(!appname; debug(!"Explicitely importing main file: ")) 
            ; <get-imports> Imports(appname)
          end
          
  add-app-ini-error: ast -> ast
    with rules(ImportErrors :+= (ast, "Cannot find application.ini"))
             
  get-all-imports: (ast, path) -> <id>
    with  fullpath := <concat-strings> [<prim("SSL_EXT_projectpath")>, "/", path]
        ; rules(IsImported : fullpath) // do not reload the current file if its transitively imported
        ; {| ParsingModule:
              rules(ParsingModule := fullpath)
              // try to import main file if needed
            ; (<import-main-file> fullpath <+ <add-app-ini-error> ast)
            ; <alltd(get-imports)> ast
	      |}
 
  get-imports: 
    imp@Imports(x) -> imp
    where {| TopImport: 
     		where(try(not(TopImport); rules(TopImport := imp)))
      ; <editor-parse-webdsl-module> (<concat-strings> [x,".app"])
   	|}
          
rules

  init-compiler-builtins =
    not(built-in-template-rule-setup
        ; fatal-err-msg(|"error in typechecker.str, failure should not occur here, make sure built-in-template-setup rules end with ';fail'")
        ) // setup dyn rules for checks
  ; not(after-tc-declare-hook
        ; fatal-err-msg(|"error in typechecker.str, failure should not occur here, make sure after-tc-declare-hook rules end with ';fail'")
        ) // setup dyn rules for checks
  