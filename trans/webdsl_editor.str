module webdsl_editor

imports
  libstratego-lib
  libwebdsl-generator
  libwebdsl-front
  parse
  application-ini
  util
  caching
  typechecker
  typecheck/import		// for ExtraWarnings
	resolve
	dependencies
	lib/editor-common.generated
	dr
  
signature constructors
  FILE : Term -> Term
  
strategies // editor service interface

  main-webdsl =
     fatal-err(|"Not designed to be invoked directly")
  
  editor-check(|fullpath): ast -> (ast-renamed, errs, warns, notes)
    with
        {| Rename:
          dbg-time(rename-top => ast-renamed | "rename")
        |}
        // Typecheck local
      ; {| DynamicRulesUsed, ExtraWarnings:
	          enable-dr-usage-tracking
	        ; not(find-extra-errors)       // collected in dr
	        ; warn3 := <bagof-ExtraWarnings>
          ; (err1, warn1) := 
	            <dbg-time(catch-errors-editor(constraint-error-all) | "typecheck")>
	        ; disable-dr-usage-tracking
	          
	          // remove {DR_DUMMY()}
	        ; all-keys-DynamicRulesUsed; remove-dr-dummies => drs
	        ; rules(RulesUsedBy : fullpath -> drs)
	          
        |}
        // Typecheck global
      ; dbg-time(
          (err2, warn2) := <catch-errors-editor(not(<constraint-error-global> ""))>
        | "constraint-global")
      ; errs := <concat> [err1,err2]
      ; warns := <concat> [warn1,warn2,warn3]
      ; notes := []
  
  // If editor is updated, we need to reparse and recheck all files to create a new dependency graph.
  // This might take a while; we'll schedule a background job for this.
  is-editor-updated = 
      dependencies-file => filename
    ; (   not(<file-exists> filename)
        <+ <gt> (<editor-timestamp>, <modification-time> filename))
  //is-editor-updated = fail
    
  schedule-background-update =
      where(!""; debug(!"Editor updated; scheduling background update."))
    ; queue-strategy(|"editor-analyze-work-update", "Updating editor...")
  
  editor-analyze-work-update =
      rules(PerformingUpdate := True())
    ; editor-analyze
  
  // Path is relative to project, without leading slash
  // Projectpath is an absolute path to the project root, without trailing slash
  webdsl-editor-init =
      ?(path, projectpath)
    ; editor-init     // cleanup dynamic rules
    ; fullpath := <concat-strings> [projectpath, "/", path]
    ; rules( FullPath := fullpath )
    ; get-main-file-name      // set ApplicationIniDir
  
  editor-analyze: input@(ast, path, projectpath) -> result
    with  disable-dr-usage-tracking     // avoid overhead
        ; !""; debug
        ; !path; debug(!"Analyzing: ")
        ; <webdsl-editor-init> (path, projectpath)
        ; not(PerformingUpdate); is-editor-updated; with(
              <schedule-background-update> input
            ; result := (ast, [], [], [])
          )
          <+ <editor-analyze-work> ast => result
  
  read-old-signature: filename -> sig
    with  path := <import-cache-path> filename
    where <gt> (<file-exists; modification-time> path, <editor-timestamp>)
        ; (sig, _) := <ReadFromFile> path
      
  editor-analyze-work:
    ast -> (ast-desugared, errors, warnings, notes)
    with
      // save old cached version to calculate difference
      old-ruleset := <FullPath; dbg-time(read-old-signature | "read old sig") <+ ![]>
    ; rules(RulesCreatedPrev := old-ruleset)
    
    ; <desugar-compat> ast
    ; in-typechecking-phase(
        
        // Set up built-in types before doing any declares
	      typecheck-init
	      
	      // Declare this module (processes transitive imports)
	    ; get-main-import
	    ; {| CurrentFile:
		       rules(CurrentFile := <FullPath>)
	        ; where(
	            declare-globals => (ruleset, imports)
	          ; cache-path := <FullPath; import-cache-path>
	          ; <WriteToBinaryFile> (cache-path, (ruleset, imports))
	          ; rules(RulesCreated := ruleset)
	        )
	      |}

	    ; typechecker-after-declare
	    ; editor-check(|<FullPath>) => (ast-renamed, err1, warnings, notes)
    )
    ; ast-desugared := <dbg-time(desugar-all | "resolving")> ast-renamed    // declare for resolving
    
    ; errors := <concat> [err1, <bagof-ImportErrors>]
    
    ; log-time-helper(update-dependency-graph | "update dependency graph")
      
    ; print-total-log-time
    ; where(
        dbg-time(
            // Modules that depend on rules that are changed by this update
            find-dependent-modules => dependent-mods1
          ; try(not(?[]); debug(!"Dependent modules to check: "))
            // Modules that are not yet checked; no dependencies calculated
          ; bagof-ModulesToCheck; map(Fst) => dependent-mods2
          ; try(not(?[]); debug(!"Unchecked modules to check: "))
          ; <concat; uniq> [dependent-mods1, dependent-mods2]
            
          ; try(where(ModulesEnqueued => enqueued); <diff> (<id>, enqueued))
          ; debug(!"... all modules to check: ")
          ; try(
            	 not(?[])
            ; if PerformingUpdate then
              	// with progress meter
              	queue-strategy(|"editor-analyze-update-modules", "Performing complete typecheck")
              else
                queue-analysis     // without ui
              end
            )
        | "finding dependent mods")
     )
    ; enable-dr-usage-tracking      // for dr -> module resolving
  
  update-other-modules =
      bagof-ModulesToCheck    // pairs of (fullpath, ast)
    ; where(length; set-total-work-units)
    ; map(update-module)
  
  editor-analyze-update-modules =
      ?modules
    ; rules(ModulesEnqueued := modules)
    ; {| ModulesEnqueued:   // scope again so the rule survives editor-init
        where(length; set-total-work-units)
      ; map(update-module)
      |}
      
  update-module: fullpath -> fullpath
    with  <debug(!"Checking import: ")> fullpath
        ; editor-init                 // clear all dynamic rules
        ; ModulesEnqueued; debug(!"Modules enqueued: ")
        ; ast := <parse-file> fullpath
        ; (path, project-path) := <split-fullpath> fullpath
        ; debug(!"Path, project-path: ")
        ; errors := <editor-analyze> (ast, path, project-path)
        ; <set-markers(|ast)> errors
        ; complete-work-unit
    
  find-extra-errors = fail
  
  desugar-all =
      preserve(innermost(desugar-def))
  
  import-main-file: ast -> ast
    with  appname := <AppName>
        ; where(!appname; debug(!"Explicitely importing main file: ")) 
        ; <get-imports> Imports(appname)
          
  add-app-ini-error: ast -> ast
    with rules(ImportErrors :+= (ast, "Cannot find application.ini"))
             
  get-main-import: ast -> ast
    with  FullPath => fullpath
        ; {| ParsingModule:
              rules(ParsingModule := fullpath)
              // try to import main file if we're parsing a module
            ; !ast
            ; try(
              	  where(ApplicationIniDir <+ add-app-ini-error; fail)
                  // if checking a module, import main app file
                ; ?Module(_,_); import-main-file
              )
	      |}
 
  get-imports: 
    imp@Imports(x) -> imp
    where {| TopImport: 
     		where(try(not(TopImport); rules(TopImport := imp)))
      ; <editor-parse-webdsl-module> x
   	|}