module caching

imports
    parse
    ../lib/editor-common.generated
    libwebdsl-front
    util

strategies  
  
  // Already stored
  store-imported-def = where(ReadingFromMemoryCache)
  
  store-imported-def: def -> def
    where mod := <CurrentModule>
        ; rules(ModuleDefs :+ mod -> def)
        
  // For main app, do not remember anything
  store-imported-def = id
    
strategies // storing for compiler typechecker
  
  // Already stored
  store-tc-def = where(ReadingFromMemoryCache)
 
  store-tc-def: def -> def
    where mod := <CurrentModule>
        ; rules(ModuleDefsTc :+ mod -> def)
  
  // For main app, do not remember anything
  store-tc-def = id

strategies
  
  open-memory-cache(resolve-path, parse-file, record-declarations) =
      where(fullpath := <resolve-path>)
    ; open-memory-cache(parse-file, record-declarations | fullpath)
  
  open-memory-cache(parse-file, record-declarations | fullpath) =
     where(<IsImported> fullpath)
  
  open-memory-cache(parse-file, record-declarations | fullpath): modulename -> modulename
  where ts := <ModuleCacheTimestamp> fullpath
      ; modtime := <modification-time> fullpath
      ; <eq> (ts,modtime)
   with where(!modulename; debug(!"Using in-mem cache: "))
      ; {| ReadingFromMemoryCache:
            rules(ReadingFromMemoryCache := True())
            // typecheck
          ; tc-ast := <log-time-helper(bagof-ModuleDefsTc | " get bag1")> fullpath
          //; debug(!"TC AST: ")
          ; <log-time-helper(alltd(declare-global <+ declare-global-toplevel) | "declare global")> tc-ast
            // resolving
          ; ast := <log-time-helper(bagof-ModuleDefs | " get bag2")> fullpath
          //; debug(!"AST: ")
          ; <alltd(try(get-imports); log-time-helper(declare-def | "declare def"); ensure-ast(|"after declare"))> ast
        |}
      ; rules(IsImported : fullpath)

  open-memory-cache(parse-file, record-declarations | fullpath): modulename -> modulename
   with modtime := <modification-time> fullpath
      ; where(!fullpath; debug(!"No in-memory cache for: "))
      ; file := <log-time-helper(parse-file | "parse file")> fullpath
      ; ensure-ast(|"after parse")
      ; <preserve(try(fix-module-name(|fullpath))); check-ast(|"after fix"); record-declarations> file
      ; rules(IsImported: fullpath)
      ; rules(ModuleCacheTimestamp :+ fullpath -> modtime)
  
  fix-module-name(|fullpath): Module(name, sections) -> Module(name2, sections)
    where name2 := <fix-module-name> (fullpath, name)
  fix-module-name(|fullpath): ModuleDefs(name, defs, sections) -> ModuleDefs(name2, defs, sections)
    where name2 := <fix-module-name> (fullpath, name)
    
  fix-module-name: (fullpath, modname) -> newname
    with base := <concat-strings> [<ApplicationIniDir <+ prim("SSL_EXT_projectpath")>, "/"]
    where (l,r) := <split-after> (fullpath, base)
        ; not(r := "") // base not found
        ; newname := <split-before; Fst> (r, ".app")
        ; not(<eq> (newname, modname))
        ; <concat-strings; debug> ["Renaming module '",modname,"' to '",newname,"'."]
        
strategies // dr utils
  
  iset-copy =
     elems := <iset-elements>
   ; count := <length> elems
   ; newset := <new-iset(|count,75)>
   ; <iset-addlist(|elems)> newset
  
  save-rule-set: name -> (name, RuleScope(newset, newtable))
   with  RuleScope(set, table) := <dr-get-rule-set(|name); Hd>
       ; newset := <iset-copy> set
       ; newtable := <hashtable-copy> table
       
  dr-set-last-scope-rule-set(|name): ruleset -> ruleset
   with [firstscope | restscopes] := <dr-get-rule-set(|name)>
      ; <dr-destroy-scope> firstscope
      ; ![ruleset | restscopes]
      ; dr-set-rule-set(|name)

  restore-rule-set: (name,ruleset) -> <id>
   with <dr-set-last-scope-rule-set(|name)> ruleset
  
strategies // bench
  
   dbg-time(s|msg) =
      where(starttime := <times>)
    ; s
    ; where(
          total := <diff-times> (<times>,starttime)
        ; t1 := <self-children-user-time; ticks-to-seconds; real-to-string(|3)> total
        ; str := <concat-strings> [msg, ": ", t1, " s"]
        ; debug
      )