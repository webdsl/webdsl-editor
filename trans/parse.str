module parse

imports 
  libwebdsl-front 
  libstratego-sglr
  ../lib/editor-common.generated
  webdsl_editor
  application-ini
  caching
  util
  dr

rules
  
  parse-file-1 =
    parse-file(|<get-webdsl-parse-table>)
  
  format-trace(|prefix) =
  		map(\name -> <concat-strings> [prefix, name]\)
  	; separate-by(|"<br/>")
  	; concat-strings
  	; try(not(?""); <concat-strings> ["<br/>", <id>])
  
  report-import-failed(|txt): fullpath -> <fail>
  	with 	trace-entries := <bigbagof-CurrentFile>
  	    ; trace := <format-trace(|"... imported from: ")> trace-entries
  	    ; msg := <concat-strings> [txt, ": ", fullpath, trace]
  		  ; import := <TopImport <+ !"DummyImport(main-app)">
  		  ; rules(ImportErrors :+= (import, msg))
  			
  editor-parse-webdsl-module: x -> x
  	where(
    		full-path := $[[<ApplicationIniDir>]/[x]] // $[[projectdir]/[<DirName>]/[y]]
    	; <file-exists <+ report-import-failed(|"Imported file not found")> full-path
   	)
  ; (open-import-sig(!full-path, parse-file-1, read-import(|full-path), read-import-sigs)
      <+
     <report-import-failed(|"Could not import file")> full-path
    )
    
  is-unused-dr =
      ?"AddWebDSLDefs"
   <+ ?"LogTimes"
   <+ ?"LogTimesKey"
   
  // TODO: rules needed for resolving but not typechecking??
  all-used-drs = !["IsDerivedProperty","OriginalNonUniqueName","TemplateDecl","ErrorDuringOverloadResolution","PageDecl","IsRequestScopedVarDecl","IsReservedFunction","Properties","IsGlobal","EntityFunctionNoOverloading","TopLevelTemplateDefinitions","TemplateSignature","PrincipalDecl","HasNameProperty","PropertyDecl","IsProperty","IsProcedure","CheckEmailSignature","TypeOfProperty","IsSessionEntityType","CheckGeneratedGlobalFunctionSignature","CheckPageSignature","EntityFunctionDecl","CheckFunctionSignatureArgumentTypes","FunctionDecl","CheckGlobalFunctionSignatureArgumentTypes","MostSpecificFunction","CheckFunctionSignature","NativeClassDecl","EntDecl","TypeOf","EmailDefinition","Functions","VarDecl","ExtendGlobalFunctions","TopLevelTemplateDecl","IndexedEntity","InferringExpressionType","EntityIdType","HasNaturalId","TemplateNewName","PropertyNameToUniqueName","Rename","StaticRename","TemplateDefinition"]
  extra-used-drs = ![]
 
  is-used-dr = ?x; where(<concat> [<all-used-drs>, <extra-used-drs>]; fetch-elem(?x))
  is-used-dr = ?"ModuleImports"
  
  get-transitive-import: imp@Imports(x) -> imp
  	with <get-imports> imp
  
  read-import(|fullpath) =
      desugar-compat  // simplify module/app constructor
    ; preserve(try(fix-module-name(|fullpath)))
     	// TODO: check this really release the parsetree memory
    ; where(alltd(origin-strip); ?ast-unstripped)
    ; alltd(strip-bodies)
    ; where(declare-globals => (ruleset, imports))
      // TODO: stripping of built-in functions
    ; rules(ModulesToCheck :+= (fullpath, ast-unstripped))
    ; !(ruleset, imports)
      
  declare-globals =
      where(
        imports := <collect(?Imports(_))>
      ; filter(get-imports)
    )
    ; start-record-dynamic-rules
		;	desugar-compat
		; typecheck-declare
		; where(
		    ruleset := <end-record-dynamic-rules; filter(where(Fst; is-used-dr))>
		  ; set-module-for-rule-closure
		)
  	; !(ruleset, imports)
		  
  read-import-sigs: (ruleset, imports) -> (ruleset, imports)
    with <log-time-helper(load-dynamic-rule-closure | "load drs")> ruleset
       ; <map(get-imports)> imports
       
  // find a node in an ast
  find-node(|sig): ast -> node
    with  <oncetd(?sig; ?node)> ast
        <+ where(!sig; debug(!"Looking for node: ")); fail
  
  get-imported-decl(|mod): sig -> node
    with  ast := <log-time-helper(parse-file-1 <+ debug(!"Parsing failed") | "parse")> mod
        ; if <?Module(_,_)> sig then
              node := <preserve(try(desugar-compat)) // only simplify module constructor
                      ; preserve(strip-mod)
                      > ast
          else
              <log-time-helper(
                     preserve(alltd(strip-bodies); desugar-all)
                  <+ debug(!"desugar/strip failed")
                | "desugar")> ast
            ; node := <log-time-helper(find-node(|sig)
                | "find node desugared ast")>
          end
        ; print-total-log-time
        ; <ensure-ast(|"after get-imported-decl")> node
          