module parse

imports 
  libwebdsl-front 
  libwebdsl-generator
  libstratego-sglr
  lib/editor-common.generated
  webdsl_editor
  application-ini
  typecheck/import
  trans/-

rules
  
  format-trace(|prefix) =
  		map(\name -> <concat-strings> [prefix, name]\)
  	; separate-by(|"<br/>")
  	; concat-strings
  	; try(not(?""); <concat-strings> ["<br/>", <id>])
  
  report-import-failed(|txt): fullpath -> <fail>
  	with 	trace-entries := <bigbagof-CurrentFile>
  	    ; trace := <format-trace(|"... imported from: ")> trace-entries
  	    ; msg := <concat-strings> [txt, ": ", fullpath, trace]
  		  ; import := <TopImport <+ !"DummyImport(main-app)">
  		  ; rules(ImportErrors :+= (import, msg))

  import-to-fullpath: x -> $[[<ApplicationIniDir>]/[x].app]
  			
  editor-parse-webdsl-module: x -> x
  	where(
    		full-path := <get-fixed-import-path <+ report-import-failed(|"Imported file not found")> x
   	)
  ; (open-import-sig(
    		!full-path
    	, log-time-helper(parse-file | "parse")
    	, read-import(|full-path)
    	, read-import-sigs)
      <+
    	 <report-import-failed(|"Could not import file")> full-path
    )
  
  get-fixed-import-path = import-to-fullpath; file-exists
  // FIXME: before the first build, src-webdsl-template files are not copied to .servletapp
  get-fixed-import-path =
      <split-after; Snd> (<id>, ".servletapp/src-webdsl-template/")
    ; <concat-strings> [<plugin-path>, "/webdsl-template/template-webdsl/", <id>, ".app"]
    ; file-exists
  
  all-used-drs = !<import-term(include/webdsl-typechecker-rules.aterm)>
  is-used-dr = ?"ModuleDecl"
 
  is-used-dr = ?x; where(all-used-drs; fetch-elem(?x))
  
  read-import(|fullpath) =
      desugar-compat  // simplify module/app constructor
    ; preserve(try(fix-module-name(|fullpath)))
    ; where(alltd(origin-strip); ?ast-unstripped)
    ; where(declare-globals => (ruleset, imports))
    ; rules(ModulesToCheck :+= (fullpath, ast-unstripped))
    ; !(ruleset, imports)
  
  strip-and-annotate-dr-value =
      try(preserve(alltd(strip-bodies)))
    ; try(add-generated-anno)
      
  add-generated-anno: (stamp, value) -> (stamp, value2)
    where <not(has-ast-mapping)> value
        ; not(is-string <+ is-list)
        ; value2 := <add-anno(|IsGeneratedAnno())> value

  declare-globals =
     where(
        imports := <collect(?Imports(_))>
      ; filter(get-imports)
    )
    ; start-record-dynamic-rules
		;	desugar-compat
	  ; try(where(store-module))
		; typecheck-declare
		; end-record-dynamic-rules
		; filter(where(Fst; is-used-dr))
		  // strip bodies of generated definitions
		; map-dr-values(strip-and-annotate-dr-value)
		; !(<id>, imports)
		  
  read-import-sigs: (ruleset, imports) -> (ruleset, imports)
    with <log-time-helper(load-dynamic-rule-closure | "load drs")> ruleset
       ; <filter(get-imports)> imports
       
  // Try subnodes before stripping the node
  find-node(|sig): node -> res
    where preserve(strip-bodies); ?sig; ?res
      <+  ?sig; ?res
      <+  <one(find-node(|sig); ?res)> node
      
  get-imported-decl(|mod): sig -> node
    with  ast := <log-time-helper(parse-file <+ debug(!"Parsing failed") | "parse")> mod
        ; if <?Module(_,_)> sig then
              node := ast
          else
              <log-time-helper(preserve(desugar-all)
                  <+ debug(!"desugar failed")
                | "desugar")> ast
            ; node := <log-time-helper(find-node(|sig)
                | "find node desugared ast")>
          end
        ; print-total-log-time
        ; <ensure-ast(|"after get-imported-decl")> node