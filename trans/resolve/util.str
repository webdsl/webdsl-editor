module resolve/util

imports
    resolve/-
    parse

strategies
    
  // If the given declaration is in another module, reparse that file and return node with position information
  find-declaration: decl1 -> decl
    where FullPath => mainmod
        ; decl2 := <desugar-all; alltd(strip-bodies)> decl1
        ; if mod := <DefToModule; debug(!"Got module source: "); not(?mainmod); debug(!".. loading def from: ")> decl2 then
            decl := <get-imported-decl(|mod) <+ debug(!"get-imported-def failed.")> decl2
          else
              debug(!"... def is from local ast. ")
            ; decl := decl1
          end
        ; ensure-ast(|"find-declaration")
          
  editor-resolve :
    (node, position, ast, path, project-path) -> target
    where target := <find-declaration-of; find-declaration> node
  
  find-declaration-of =
      preserve(innermost(desugar-def)); debug(!"Desugared: "); declaration-of; debug(!" Found: ")
  
  // Simplified applications
  editor-resolve: (node, position, ast, path, project-path) -> x
    where x := <resolve-simple> node
    
  editor-hover: (node, position, ast, path, project-path) -> x
    where x := <hover-simple> node
  
rules   // Rules to store hover info between resolve and hover
  
  set-hover-info(|x) = ?info; rules(HoverInfo := info)
  get-hover-info = HoverInfo
  // Given a renamed AST node, retrieve the new-style normalized element and request hover info 
  get-hover-info-translate = get-hover-info // desugar-def; strip-bodies; strip-annos; get-hover-info 
  