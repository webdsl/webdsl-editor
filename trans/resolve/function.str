module resolve/function

imports
  libwebdsl-front
  typechecker
  util
  
rules // resolve
  
  // Resolve entity function call
  in-entity-resolve(|ent): tc@ThisCall(nm, arg*) -> f
    where f := <find-entity-func(|ent)> (nm, arg*)
          
  // Resolve entity function call
  resolve-simple: Call(expr, nm, arg*) -> f
    with  SimpleSort(x_class) := <type-of> expr
        ; f := <find-entity-func(|x_class)> (nm, arg*)
 
  find-entity-func(|ent): (nm, arg*) -> f
    with  t_arg* := <map(type-of)> arg*
    where <CheckFunctionSignature> (SimpleSort(ent), nm, t_arg*)
    with  f := <declaration-of-entity(|ent); find-declaration> Function(nm, t_arg*, None(), None())
        ; <set-hover-info(|f)> ent
  
  // Check super class
  find-entity-func(|ent) = where(super := <Extends> ent); find-entity-func(|super)
    
  // Resolve global call
  editor-resolve: a@(ThisCall(nm, arg*), position, ast, path, project-path) -> f
    with  t_arg* := <map(type-of)> arg*
    where listof-t_arg* := <bagof-CheckGlobalFunctionSignatureArgumentTypes> (None(), nm, t_arg*)
        ; resolved_arg* := <find-most-specific-signature(|t_arg*,nm)> listof-t_arg*
        ; f := <declaration-of; find-declaration> Function(nm, resolved_arg*, None(), None()) 

rules // hover
        
  hover-simple = pp-func
  
  // Built-in global function
  hover-simple: ThisCall(nm, arg*) -> txt
    where targ* := <map(type-of)> arg*
        ; srt := <check-builtin-signature> (None(), nm, targ*)
    with  txt := <concat-strings> ["Built-in function ",nm,"(",<pp-args> targ*,") : ",<pp-type> srt]
    
  // Built-in function
  hover-simple: Call(exp, nm, arg*) -> txt 
    where targ* := <map(type-of)> arg*
        ; srt-exp := <type-of> exp
        ; srt := <check-builtin-signature> (srt-exp, nm, targ*)
    with  txt := <concat-strings> ["Built-in function ",nm,"(",<pp-args> targ*,") : ", <pp-type> srt, " of type ",<pp-type> srt-exp]
        
  // Built-ins
  hover-simple: ThisCall("url", [arg]) -> <concat-strings> ["Navigate to url: ", arg]
  //hover-simple: ThisCall("email", 
  
  hover-simple: a@Arg(x, srt) -> text
    with  text := <concat-strings> ["Argument ", x, " : ",<pp-type> srt] 

rules // utils
  
  pp-func: Function(name,args,ret,_) ->
    <concat-strings>["Function ",name,"(",<pp-args> args,") : ",<pp-webdsl> ret]
  pp-func: FunctionNoReturn(name, args, _) ->
    <concat-strings> ["Function ",name,"(",<pp-args> args,")"]
  pp-func: Predicate(name,args,_) ->
    <concat-strings> ["Predicate ",name,"(",<pp-args> args,")"]
  
  pp-args = map(pp-webdsl); separate-by(|", "); concat-strings
  
rules // more utils
  
  in-entity =
      ?(node, position, ast, path, project-path)
    ; <walk-ast(get-entity-def <+ get-extend-entity-def| position)> ast
    