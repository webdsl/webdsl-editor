module WebDslMix[E]

imports
  WebDSL
  AccessControlMix
  StylingMix
  DeriveMix

exports

  lexical syntax

    [0-9]* -> MetaVarSuffix
    "_" [A-Za-z0-9\_\-]+ -> MetaVarSuffix

  context-free syntax
    "webdsl"  "|[" Application      "]|" -> E {cons("ToMetaExpr")}
              "|[" Application      "]|" -> E {cons("ToMetaExpr")}
    "webdsl"  "|[" Section          "]|" -> E {cons("ToMetaExpr")}
              "|[" Section          "]|" -> E {cons("ToMetaExpr")}
    "webdsl"  "|[" Section*         "]|" -> E {cons("ToMetaExpr")}
              "|[" Section*         "]|" -> E {cons("ToMetaExpr")}
    "webdsl"  "|[" TemplateElement  "]|" -> E {cons("ToMetaExpr")}
    "webdsl*" "|[" TemplateElement* "]|" -> E {cons("ToMetaExpr")}

    "def"   "|[" Definition  "]|" -> E {cons("ToMetaExpr")}
    "def*"  "|[" Definition* "]|" -> E {cons("ToMetaExpr")}
    "fun"   "|[" Function  "]|"   -> E {cons("ToMetaExpr")}
    "fun*"  "|[" Function* "]|"   -> E {cons("ToMetaExpr")}
    "sdef"  "|["  SecurityDefinition   "]|" -> E {cons("ToMetaExpr")}
    "sdef*" "|["  SecurityDefinition*  "]|" -> E {cons("ToMetaExpr")}

    "webdsl" "|[" Description "]|" -> E {cons("ToMetaExpr")}
             "|[" Description "]|" -> E {cons("ToMetaExpr")}

  variables

    "app" [0-9]*                -> Application {prefer}
    "sec" [0-9]*                -> Section     {prefer}
    "sec" [0-9]* "*"            -> Section*    {prefer}
    "def" [0-9]*                -> Definition  {prefer}
    "def" [0-9]* "*"            -> Definition* {prefer}
    "procelem" [0-9]*           -> ProcedureElement  {prefer}
    "procelem" [0-9]* "*"       -> ProcedureElement* {prefer}
    "procelem_"[A-Za-z0-9]+     -> ProcedureElement  {prefer}
    "procelem_"[A-Za-z0-9]+ "*" -> ProcedureElement* {prefer}
    "processexp" [0-9]*         -> ProcessExp  {prefer}
    "processexp" [0-9]* "*"     -> ProcessExp* {prefer}
    "desc"[0-9]*                -> Description {prefer}
    "mod" [0-9]*                -> Modifier    {prefer}
    "mod" [0-9]* "*"            -> Modifier*   {prefer}

  context-free syntax

    "webdsl" "|[" Entity            "]|" -> E {cons("ToMetaExpr")}
             "|[" Entity            "]|" -> E {cons("ToMetaExpr")}
    "webdsl" "|[" Property          "]|" -> E {cons("ToMetaExpr")}
             "|[" Property          "]|" -> E {cons("ToMetaExpr")}
    "webdsl" "|[" Property*         "]|" -> E {cons("ToMetaExpr")}
             "|[" Property*         "]|" -> E {cons("ToMetaExpr")}
    "webdsl" "|[" Sort              "]|" -> E {cons("ToMetaExpr")}
             "|[" Sort              "]|" -> E {cons("ToMetaExpr")}
    "webdsl" "|[" {Sort ","}*       "]|" -> E {cons("ToMetaExpr")}
             "|[" {Sort ","}*       "]|" -> E {cons("ToMetaExpr")}
    "webdsl" "|[" Annotation        "]|" -> E {cons("ToMetaExpr")}
             "|[" Annotation        "]|" -> E {cons("ToMetaExpr")}
    "webdsl" "|[" {Annotation ","}* "]|" -> E {cons("ToMetaExpr")}
             "|[" {Annotation ","}* "]|" -> E {cons("ToMetaExpr")}

  variables
    "ent" [0-9]*     -> Entity            {prefer}
    "prop"[0-9]*     -> Property          {prefer}
    "prop"[0-9]* "*" -> Property*         {prefer}
    "srt" MetaVarSuffix     -> Sort              {prefer}
    "srt" MetaVarSuffix "*" -> {Sort ","}*       {prefer}
    "ann" [0-9]*     -> Annotation        {prefer}
    "ann" [0-9]* "*" -> {Annotation ","}* {prefer}
    "k"   [0-9]*     -> PropKind          {prefer}
    
    "dprop"[0-9]*     -> DeriveProperty   {prefer}
    "dprop"[0-9]* "*" -> {DeriveProperty ","}*  {prefer}

  context-free syntax
    "tdef"      "|[" TemplateDefinition  "]|" -> E {cons("ToMetaExpr")}
    "farg"      "|[" FormalArg           "]|" -> E {cons("ToMetaExpr")}
    "farg*"     "|[" {FormalArg ","}*    "]|" -> E {cons("ToMetaExpr")}
    "procelem"  "|[" ProcedureElement    "]|" -> E {cons("ToMetaExpr")}
    "procelem*" "|[" ProcedureElement*   "]|" -> E {cons("ToMetaExpr")}
    "elem"      "|[" TemplateElement     "]|" -> E {cons("ToMetaExpr")}
    "elem*"     "|[" TemplateElement*    "]|" -> E {cons("ToMetaExpr")}
    "call"      "|[" TemplateCall        "]|" -> E {cons("ToMetaExpr")}
    "call*"     "|[" TemplateCall*       "]|" -> E {cons("ToMetaExpr")}
    "exp"       "|[" Exp                 "]|" -> E {cons("ToMetaExpr")}
    "passign"   "|[" PropertyAssignment  "]|" -> E {cons("ToMetaExpr")}
    "passign*"  "|[" PropertyAssignment* "]|" -> E {cons("ToMetaExpr")}

  variables
    "tdef"[0-9]*                -> TemplateDefinition {prefer}
    "farg"[0-9]*                -> FormalArg          {prefer}
    "farg" MetaVarSuffix "*"    -> {FormalArg ","}*   {prefer}
    "elem"[0-9]*                -> TemplateElement    {prefer}
    "elem"[0-9]* "*"            -> TemplateElement*   {prefer}
    "elem_"[A-Za-z0-9]+         -> TemplateElement    {prefer}
    "elem_"[A-Za-z0-9]+ "*"     -> TemplateElement*   {prefer}
    "call"[0-9]*                -> TemplateCall       {prefer}
    "call"[0-9]* "*"            -> TemplateCall*      {prefer}
    "passign" MetaVarSuffix     -> PropertyAssignment          {prefer}
    "passign" MetaVarSuffix "*" -> {PropertyAssignment ","}*   {prefer}
%%    "req" MetaVarSuffix     -> TemplateArg          {prefer}
%%    "req" MetaVarSuffix "*" -> {TemplateArg ","}*   {prefer}
    "req" MetaVarSuffix "*"   -> TemplateArgs {prefer}
    "template-body" MetaVarSuffix -> TemplateBody{prefer}
    "withblock" MetaVarSuffix   -> TemplateWith       {prefer}
    "withdef" MetaVarSuffix     -> ArgDefine          {prefer}
    "withdef" MetaVarSuffix "*"     -> {ArgDefine ","}* {prefer}
 
    "talt"[0-9]*            -> TemplateCaseAlt {prefer}
    "talt"[0-9]* "*"        -> TemplateCaseAlt* {prefer}

  context-free syntax
    "webdsl" "|[" Action     "]|" -> E {cons("ToMetaExpr")}
             "|[" Action     "]|" -> E {cons("ToMetaExpr")}
    "webdsl" "|[" Statement  "]|" -> E {cons("ToMetaExpr")}
             "|[" Statement  "]|" -> E {cons("ToMetaExpr")}
    "stat"   "|[" Statement  "]|" -> E {cons("ToMetaExpr")}
    "webdsl" "|[" Statement* "]|" -> E {cons("ToMetaExpr")}
             "|[" Statement* "]|" -> E {cons("ToMetaExpr")}
    "webdsl" "|[" Case       "]|" -> E {cons("ToMetaExpr")}
             "|[" Case       "]|" -> E {cons("ToMetaExpr")}

  variables

    "_act" [0-9]*          -> Action     {prefer}
    "stat" [0-9]*          -> Statement  {prefer}
    "stat" [0-9]* "*"      -> Statement* {prefer}
    "stat_"[A-Za-z0-9]*    -> Statement  {prefer}
    "stat_"[A-Za-z0-9]*"*" -> Statement* {prefer}
    "block"[0-9]*          -> Block      {prefer}

    "alt"[0-9]*            -> Case {prefer}
    "alt"[0-9]* "*"        -> Case* {prefer}

  context-free syntax
    "webdsl:e" "|[" Exp         "]|" -> E {cons("ToMetaExpr")}
    "|[" Exp         "]|" -> E {cons("ToMetaExpr")}
    "|[" Assignment  "]|" -> E {cons("ToMetaExpr")}
    "|[" Assignment* "]|" -> E {cons("ToMetaExpr")}

  variables

    "e"   [0-9\']*           -> Exp         {prefer}
    "e_"  [A-Za-z0-9\']+     -> Exp         {prefer}
    "e"   [0-9\']* "*"       -> {Exp ","}*  {prefer}
    "e_"  [A-Za-z0-9\']+ "*" -> {Exp ","}*  {prefer}
    "fltr"[0-9]*             -> Filter      {prefer}
    "asgn"[0-9]*             -> Assignment  {prefer}
    "asgn"[0-9]* "*"         -> Assignment* {prefer}
    "fun"[0-9]*              -> Function    {prefer}
    "fun"[0-9]* "*"          -> Function*   {prefer}

  variables

    "qid"[0-9]*                -> QId     {prefer}
    [xyz][0-9]*                -> Id      {prefer}
    [xyz]"_"[A-Za-z0-9]+       -> Id      {prefer}
    [xyz][0-9]*                -> TemplateCallId      {prefer}
    [xyz]"_"[A-Za-z0-9]+       -> TemplateCallId      {prefer}
    [xyz] MetaVarSuffix        -> Identifier[[HQL]] {prefer} %%hql identifier
    %%[xyz]"_"[A-Za-z0-9\']+ "*" -> Id*     {prefer}
    [xyz][0-9]*                -> MatchId {prefer}
    [xyz]"_"[A-Za-z0-9]+       -> MatchId {prefer}
    "str"[0-9]*                -> String  {prefer}

    "const"[0-9]*              -> ConstValue {prefer}

  lexical syntax

    [\$][A-Za-z0-9]* -> IdVar
    [\$][A-Za-z0-9]* -> Id[[StrategoHost]]

  lexical restrictions

    IdVar -/- [A-Za-z0-9]

  variables

    IdVar -> Id {prefer}
