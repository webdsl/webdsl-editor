module WebDSL-Procedures

imports
  WebDSL-AccessControl
  WebDSL-UI
  WebDSL-DataModel
  WebDSL-Action
  WebDSL-Lexical

exports
  sorts Section Definition

  context-free syntax

	"procedure" Id "(" FormalArg ")" "{"
	   ProcedureElement* 
	"}"                             -> Procedure {cons("Procedure")}

	"auto" "procedure" Id "(" FormalArg ")" "{"
	   ProcedureElement* 
	"}"                             -> Procedure {cons("AutoProcedure")}

  "extend" "procedure" Id "(" FormalArg ")" "{"
	   ProcedureElement* 
	"}"                             -> Definition {cons("ExtendProcedure")}

  Procedure                       -> Definition

	"who" "{" Exp "}"               -> ProcedureElement {cons("ProcedureWho")}
	"when" "{" Exp "}"					    -> ProcedureElement {cons("ProcedureWhen")}
	"do" Block							        -> ProcedureElement {cons("ProcedureDo")}
	"done" Block							      -> ProcedureElement {cons("ProcedureDone")}
	"enabled" Block							    -> ProcedureElement {cons("ProcedureEnabled")}
	"disabled" Block						    -> ProcedureElement {cons("ProcedureDisabled")}
	"view" "{" TemplateElement* "}" -> ProcedureElement {cons("ProcedureView")}
	
	"process" "{" ProcessExp "}"    -> ProcedureElement {cons("ProcedureProcess")}
	"processed" Block							  -> ProcedureElement {cons("ProcedureProcessed")}
	
  sorts ProcessExp
  
context-free syntax
    
    Id "(" Exp ")"                -> CallProcessExp {cons("ProcCall")} 
    CallProcessExp                -> ProcessExp                        
    ProcessExp ";" ProcessExp     -> ProcessExp {cons("ProcSeq"), left}
    
    "while" "(" Exp ")" "{" 
      ProcessExp 
    "}"                           -> ProcessExp {cons("ProcWhile")}
    
    "repeat" "{" 
      ProcessExp 
    "}" "until" CallProcessExp    -> ProcessExp {cons("ProcRepeatUntil")}

    "if" "(" Exp ")" "{" 
      ProcessExp 
     "}"                          -> ProcessExp {cons("ProcIfNoElse")}
    
    "if" "(" Exp ")" "{" 
      ProcessExp 
    "}" "else" "{" 
      ProcessExp 
    "}"                           -> ProcessExp {cons("ProcIf")}
    
    ProcessExp "xor" ProcessExp   -> ProcessExp {cons("ProcXor"), left}
    ProcessExp "and" ProcessExp   -> ProcessExp {cons("ProcAnd"), left}
    
    ProcessExp "+" ProcessExp     -> ProcessExp {cons("ProcPlus"), left}
    
    "(" ProcessExp ")"            -> ProcessExp {bracket}
  
  context-free priorities  
      {left:
        ProcessExp "and" ProcessExp  -> ProcessExp}
    > {left:
        ProcessExp "xor" ProcessExp  -> ProcessExp
        ProcessExp "+"   ProcessExp  -> ProcessExp }
    > {left:
        ProcessExp ";"   ProcessExp  -> ProcessExp {cons("ProcSeq"), left}}
