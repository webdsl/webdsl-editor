module WebDSL-ValidationAnnos

exports
  sorts Annotation PatternFlag

  context-free syntax
	%%string
    "length" "(" Int "," Int ")"              -> Annotation {cons("ValidationAnnoLength"),prefer}
    "minlength" "(" Int ")"                   -> Annotation {cons("ValidationAnnoMinLength"),prefer}   
    "maxlength" "(" Int ")"                   -> Annotation {cons("ValidationAnnoMaxLength"),prefer}    
 	"notempty"                                -> Annotation {cons("ValidationAnnoNotEmpty"),prefer}  
  	"email"                                   -> Annotation {cons("ValidationAnnoEmail"),prefer} 	 
  	"creditcardnumber"                        -> Annotation {cons("ValidationAnnoCreditCardNumber"),prefer} 	
 	"EAN"                                     -> Annotation {cons("ValidationAnnoEAN"),prefer} 
  	"pattern" "(" String ")"                  -> Annotation {cons("ValidationAnnoPattern"),prefer}   
  	"pattern" "(" String "," PatternFlag* ")" -> Annotation {cons("ValidationAnnoPatternWithFlags"),prefer}
  	
  	"canonicalequivalence"                    -> PatternFlag {cons("FlagCanonEq")} %% CANON_EQ Enables canonical equivalence.    
	"caseinsensitive"                         -> PatternFlag {cons("FlagCaseInsensitive")} %% CASE_INSENSITIVE Enables case-insensitive matching.
 	"comments"                                -> PatternFlag {cons("FlagComments")} %% COMMENTS Permits whitespace and comments in pattern.
 	"dotall"                                  -> PatternFlag {cons("FlagDotAll")} %% DOTALL Enables dotall mode.
 	"literal"                                 -> PatternFlag {cons("FlagLiteral")} %% LITERAL Enables literal parsing of the pattern.
 	"multiline"                               -> PatternFlag {cons("FlagMultiline")} %% MULTILINE Enables multiline mode.
 	"unicodecase"                             -> PatternFlag {cons("FlagUnicodeCase")} %% UNICODE_CASE Enables Unicode-aware case folding.
 	"unixlines"                               -> PatternFlag {cons("FlagUnixLines")} %% UNIX_LINES Enables Unix lines mode.
                 
	%%numeric or string representation of numeric
	"max" "(" Int ")"                         -> Annotation {cons("ValidationAnnoMax"),prefer} 
	"min" "(" Int ")"                         -> Annotation {cons("ValidationAnnoMin"),prefer}
    "range" "(" Int "," Int ")"               -> Annotation {cons("ValidationAnnoRange"),prefer}
    "minrange" "(" Int ")"                    -> Annotation {cons("ValidationAnnoMinRange"),prefer}   
    "maxrange" "(" Int ")"                    -> Annotation {cons("ValidationAnnoMaxRange"),prefer} 
    "digits" "(" Int "," Int ")"              -> Annotation {cons("ValidationAnnoDigits"),prefer}  
     
	%%date/calendar
	"past"                                    -> Annotation {cons("ValidationAnnoPast"),prefer} 
	"future"                                  -> Annotation {cons("ValidationAnnoFuture"),prefer} 	
	
	%%array, collection, map	
    "size" "(" Int "," Int ")"                -> Annotation {cons("ValidationAnnoSize"),prefer}
    "minsize" "(" Int ")"                     -> Annotation {cons("ValidationAnnoMinSize"),prefer}   
    "maxsize" "(" Int ")"                     -> Annotation {cons("ValidationAnnoMaxSize"),prefer} 
    
	%%object
  	"notnull"                                 -> Annotation {cons("ValidationAnnoNotNull"),prefer }
  	"asserttrue"                              -> Annotation {cons("ValidationAnnoAssertTrue"),prefer} 
  	"assertfalse"                             -> Annotation {cons("ValidationAnnoAssertFalse"),prefer} 
   	"valid"                                   -> Annotation {cons("ValidationAnnoValid"),prefer}
