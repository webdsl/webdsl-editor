module feedback

imports
  libstratego-lib
  libwebdsl-front
  libwebdsl-generator
  stratego-editor-support

strategies // editor service interface

  editor-analyze:
    (ast, path, fullpath) -> results
    with
      try(dr-scope-all-end);
      with(
        <set-verbosity> 3;
        set-default-config;
        <debug(!"MAIN FILE: ")> <get-main-file-name <+ !"?">
      );
      
      results := <try(avoid-modules); webdsl-collect-all-errors; debug(!"collected errors: ")> ast;

      <analyze-definitions> ast;
      dr-scope-all-start
  
  avoid-modules:
    Module(x, y) -> Application(x, y)

  // FIXME: reorder tuple args
  reference-resolve:
    (source, filename, reference, path) -> target
    where
      <debug(!"reference-resolve invoked ")> reference; 
      reference' := <desugar-top> reference;
      target := <find-definition> reference';
      debug(!"reference-resolve resolved ")
  
  reference-info:
    (source, filename, target, path) -> info
    where
      <debug(!"reference-info invoked ")> target;
      info := <pp-webdsl-to-string> target

strategies // helpers
  
  /**
   * Get the main file name of a WebDSL project, looking at the
   * application.ini file in the current directory and those above it.
   */
  get-main-file-name =
    <readdir> ".";
    getfirst(
      "application.ini";
      application-ini-to-app-name;
      <add-extension> "app"
    )
  <+
    cwd := <getcwd>;
    <chdir> "..";
    not(getcwd => cwd);
    (get-main-file-name <+ <chdir> cwd; fail)

  application-ini-to-app-name:
    filename -> appname
    where
      <read-text-file> filename;
      get-lines;
      debug(!"lines: ");
      getfirst(string-starts-with(|"export APPNAME="));
      debug(!"appname: ");
      <split-after> (<id>, "=");
      ?(_, appname)

strategies // parsing

  asfix-anno-location = id // not supported

  external parse-xtc-file(on-open-error, on-parse-error | tbl, start-symbol, path)
  
  external strsglr-report-parse-error(|)
